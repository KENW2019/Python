From: <Saved by Blink>
Snapshot-Content-Location: https://docs.python.org/3/library/functions.html#open
Subject: =?utf-8?Q?Built-in=20Functions=20=E2=80=94=20Python=203.7.3rc1=20document?=
 =?utf-8?Q?ation?=
Date: Sat, 16 Mar 2019 01:45:20 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----"


------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----
Content-Type: text/html
Content-ID: <frame-620DDCDFDC8946085096CAB3F1487B67@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/library/functions.html#open

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.=
w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns=3D"http://www.w3.=
org/1999/xhtml"><head><meta http-equiv=3D"Content-Type" content=3D"text/htm=
l; charset=3DUTF-8">
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3DEdge">
   =20
    <title>Built-in Functions =E2=80=94 Python 3.7.3rc1 documentation</titl=
e>
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pydo=
ctheme.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pygm=
ents.css" type=3D"text/css">
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"search" type=3D"application/opensearchdescription+xml" tit=
le=3D"Search within Python 3.7.3rc1 documentation" href=3D"https://docs.pyt=
hon.org/3/_static/opensearch.xml">
    <link rel=3D"author" title=3D"About these documents" href=3D"https://do=
cs.python.org/3/about.html">
    <link rel=3D"index" title=3D"Index" href=3D"https://docs.python.org/3/g=
enindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://docs.python.org/3=
/search.html">
    <link rel=3D"copyright" title=3D"Copyright" href=3D"https://docs.python=
.org/3/copyright.html">
    <link rel=3D"next" title=3D"Built-in Constants" href=3D"https://docs.py=
thon.org/3/library/constants.html">
    <link rel=3D"prev" title=3D"Introduction" href=3D"https://docs.python.o=
rg/3/library/intro.html">
    <link rel=3D"shortcut icon" type=3D"image/png" href=3D"https://docs.pyt=
hon.org/3/_static/py.png">
    <link rel=3D"canonical" href=3D"https://docs.python.org/3/library/funct=
ions.html">
   =20
   =20
   =20
   =20
   =20
   =20
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
=20

  </head><body> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/constants.html" titl=
e=3D"Built-in Constants" accesskey=3D"N">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/intro.html" title=3D=
"Introduction" accesskey=3D"P">previous</a> |</li>
        <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" =
style=3D"vertical-align: middle; margin-top: -1px"></li>
        <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
        <li>
          <span class=3D"language_switcher_placeholder"><select><option val=
ue=3D"en" selected=3D"selected">English</option><option value=3D"fr">French=
</option><option value=3D"ja">Japanese</option><option value=3D"ko">Korean<=
/option></select></span>
          <span class=3D"version_switcher_placeholder"><select><option valu=
e=3D"3.8">dev (3.8)</option><option value=3D"3.7" selected=3D"selected">3.7=
.3rc1</option><option value=3D"3.6">3.6</option><option value=3D"3.5">3.5</=
option><option value=3D"2.7">2.7</option></select></span>
          <a href=3D"https://docs.python.org/3/index.html">Documentation </=
a> =C2=BB
        </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html" accesskey=3D"U">The Python Standard Library</a> =
=C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div>   =20

    <div class=3D"document">
      <div class=3D"documentwrapper">
        <div class=3D"bodywrapper">
          <div class=3D"body" role=3D"main">
           =20
  <div class=3D"section" id=3D"built-in-functions">
<span id=3D"built-in-funcs"></span><h1>Built-in Functions<a class=3D"header=
link" href=3D"https://docs.python.org/3/library/functions.html#built-in-fun=
ctions" title=3D"Permalink to this headline">=C2=B6</a></h1>
<p>The Python interpreter has a number of functions and types built into it=
 that
are always available.  They are listed here in alphabetical order.</p>
<table border=3D"1" class=3D"docutils">
<colgroup>
<col width=3D"21%">
<col width=3D"18%">
<col width=3D"20%">
<col width=3D"20%">
<col width=3D"22%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head"></th>
<th class=3D"head"></th>
<th class=3D"head">Built-in Functions</th>
<th class=3D"head"></th>
<th class=3D"head"></th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#abs" title=3D"abs"><code class=3D"=
xref py py-func docutils literal notranslate"><span class=3D"pre">abs()</sp=
an></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#delattr" title=3D"delattr"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">delattr()</span></code><=
/a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#hash" title=3D"hash"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">hash()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-memoryview"><code class=3D"docutils literal notransl=
ate"><span class=3D"pre">memoryview()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-set"><code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">set()</span></code></a></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#all" title=3D"all"><code class=3D"x=
ref py py-func docutils literal notranslate"><span class=3D"pre">all()</spa=
n></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-dict"><code class=3D"docutils literal notranslate"><=
span class=3D"pre">dict()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#help" title=3D"help"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">help()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#min" title=3D"min"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">min()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#setattr" title=3D"setattr"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">setattr()</span></code><=
/a></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#any" title=3D"any"><code class=3D"=
xref py py-func docutils literal notranslate"><span class=3D"pre">any()</sp=
an></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#dir" title=3D"dir"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">dir()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#hex" title=3D"hex"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">hex()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#next" title=3D"next"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">next()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#slice" title=3D"slice"><code class=3D"xref py py-func doc=
utils literal notranslate"><span class=3D"pre">slice()</span></code></a></t=
d>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#ascii" title=3D"ascii"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">ascii=
()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#divmod" title=3D"divmod"><code class=3D"xref py py-func d=
ocutils literal notranslate"><span class=3D"pre">divmod()</span></code></a>=
</td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#id" title=3D"id"><code class=3D"xref py py-func docutils =
literal notranslate"><span class=3D"pre">id()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#object" title=3D"object"><code class=3D"xref py py-func d=
ocutils literal notranslate"><span class=3D"pre">object()</span></code></a>=
</td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#sorted" title=3D"sorted"><code class=3D"xref py py-func d=
ocutils literal notranslate"><span class=3D"pre">sorted()</span></code></a>=
</td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#bin" title=3D"bin"><code class=3D"=
xref py py-func docutils literal notranslate"><span class=3D"pre">bin()</sp=
an></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#enumerate" title=3D"enumerate"><code class=3D"xref py py-=
func docutils literal notranslate"><span class=3D"pre">enumerate()</span></=
code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#input" title=3D"input"><code class=3D"xref py py-func doc=
utils literal notranslate"><span class=3D"pre">input()</span></code></a></t=
d>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#oct" title=3D"oct"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">oct()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#staticmethod" title=3D"staticmethod"><code class=3D"xref =
py py-func docutils literal notranslate"><span class=3D"pre">staticmethod()=
</span></code></a></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#bool" title=3D"bool"><code class=3D=
"xref py py-func docutils literal notranslate"><span class=3D"pre">bool()</=
span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#eval" title=3D"eval"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">eval()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#int" title=3D"int"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">int()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#open" title=3D"open"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">open()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-str"><code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">str()</span></code></a></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#breakpoint" title=3D"breakpoint"><=
code class=3D"xref py py-func docutils literal notranslate"><span class=3D"=
pre">breakpoint()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#exec" title=3D"exec"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">exec()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#isinstance" title=3D"isinstance"><code class=3D"xref py p=
y-func docutils literal notranslate"><span class=3D"pre">isinstance()</span=
></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#ord" title=3D"ord"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">ord()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#sum" title=3D"sum"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">sum()</span></code></a></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#func-bytearray"><code class=3D"docu=
tils literal notranslate"><span class=3D"pre">bytearray()</span></code></a>=
</td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#filter" title=3D"filter"><code class=3D"xref py py-func d=
ocutils literal notranslate"><span class=3D"pre">filter()</span></code></a>=
</td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#issubclass" title=3D"issubclass"><code class=3D"xref py p=
y-func docutils literal notranslate"><span class=3D"pre">issubclass()</span=
></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#pow" title=3D"pow"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">pow()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#super" title=3D"super"><code class=3D"xref py py-func doc=
utils literal notranslate"><span class=3D"pre">super()</span></code></a></t=
d>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#func-bytes"><code class=3D"docutil=
s literal notranslate"><span class=3D"pre">bytes()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#float" title=3D"float"><code class=3D"xref py py-func doc=
utils literal notranslate"><span class=3D"pre">float()</span></code></a></t=
d>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#iter" title=3D"iter"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">iter()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#print" title=3D"print"><code class=3D"xref py py-func doc=
utils literal notranslate"><span class=3D"pre">print()</span></code></a></t=
d>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-tuple"><code class=3D"docutils literal notranslate">=
<span class=3D"pre">tuple()</span></code></a></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#callable" title=3D"callable"><code =
class=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">=
callable()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#format" title=3D"format"><code class=3D"xref py py-func d=
ocutils literal notranslate"><span class=3D"pre">format()</span></code></a>=
</td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#len" title=3D"len"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">len()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#property" title=3D"property"><code class=3D"xref py py-fu=
nc docutils literal notranslate"><span class=3D"pre">property()</span></cod=
e></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#type" title=3D"type"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">type()</span></code></a></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#chr" title=3D"chr"><code class=3D"=
xref py py-func docutils literal notranslate"><span class=3D"pre">chr()</sp=
an></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-frozenset"><code class=3D"docutils literal notransla=
te"><span class=3D"pre">frozenset()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-list"><code class=3D"docutils literal notranslate"><=
span class=3D"pre">list()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#func-range"><code class=3D"docutils literal notranslate">=
<span class=3D"pre">range()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#vars" title=3D"vars"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">vars()</span></code></a></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#classmethod" title=3D"classmethod">=
<code class=3D"xref py py-func docutils literal notranslate"><span class=3D=
"pre">classmethod()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#getattr" title=3D"getattr"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">getattr()</span></code><=
/a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#locals" title=3D"locals"><code class=3D"xref py py-func d=
ocutils literal notranslate"><span class=3D"pre">locals()</span></code></a>=
</td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#repr" title=3D"repr"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">repr()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#zip" title=3D"zip"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">zip()</span></code></a></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#compile" title=3D"compile"><code c=
lass=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">c=
ompile()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#globals" title=3D"globals"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">globals()</span></code><=
/a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#map" title=3D"map"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">map()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#reversed" title=3D"reversed"><code class=3D"xref py py-fu=
nc docutils literal notranslate"><span class=3D"pre">reversed()</span></cod=
e></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#__import__" title=3D"__import__"><code class=3D"xref py p=
y-func docutils literal notranslate"><span class=3D"pre">__import__()</span=
></code></a></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#complex" title=3D"complex"><code cl=
ass=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">co=
mplex()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#hasattr" title=3D"hasattr"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">hasattr()</span></code><=
/a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#max" title=3D"max"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">max()</span></code></a></td>
<td><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#round" title=3D"round"><code class=3D"xref py py-func doc=
utils literal notranslate"><span class=3D"pre">round()</span></code></a></t=
d>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<dl class=3D"function">
<dt id=3D"abs">
<code class=3D"descname">abs</code><span class=3D"sig-paren">(</span><em>x<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/functions.html#abs" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Return the absolute value of a number.  The argument may be an
integer or a floating point number.  If the argument is a complex number, i=
ts
magnitude is returned.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"all">
<code class=3D"descname">all</code><span class=3D"sig-paren">(</span><em>it=
erable</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/functions.html#all" title=3D"Permalin=
k to this definition">=C2=B6</a></dt>
<dd><p>Return <code class=3D"docutils literal notranslate"><span class=3D"p=
re">True</span></code> if all elements of the <em>iterable</em> are true (o=
r if the iterable
is empty).  Equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">all</span><span class=3D"p">(</span><span class=3D"n">itera=
ble</span><span class=3D"p">):</span>
    <span class=3D"k">for</span> <span class=3D"n">element</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</s=
pan>
        <span class=3D"k">if</span> <span class=3D"ow">not</span> <span cla=
ss=3D"n">element</span><span class=3D"p">:</span>
            <span class=3D"k">return</span> <span class=3D"kc">False</span>
    <span class=3D"k">return</span> <span class=3D"kc">True</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"any">
<code class=3D"descname">any</code><span class=3D"sig-paren">(</span><em>it=
erable</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/functions.html#any" title=3D"Permalin=
k to this definition">=C2=B6</a></dt>
<dd><p>Return <code class=3D"docutils literal notranslate"><span class=3D"p=
re">True</span></code> if any element of the <em>iterable</em> is true.  If=
 the iterable
is empty, return <code class=3D"docutils literal notranslate"><span class=
=3D"pre">False</span></code>.  Equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">any</span><span class=3D"p">(</span><span class=3D"n">itera=
ble</span><span class=3D"p">):</span>
    <span class=3D"k">for</span> <span class=3D"n">element</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</s=
pan>
        <span class=3D"k">if</span> <span class=3D"n">element</span><span c=
lass=3D"p">:</span>
            <span class=3D"k">return</span> <span class=3D"kc">True</span>
    <span class=3D"k">return</span> <span class=3D"kc">False</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"ascii">
<code class=3D"descname">ascii</code><span class=3D"sig-paren">(</span><em>=
object</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/functions.html#ascii" title=3D"Permal=
ink to this definition">=C2=B6</a></dt>
<dd><p>As <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/functions.html#repr" title=3D"repr"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">repr()</span></code></a>=
, return a string containing a printable representation of an
object, but escape the non-ASCII characters in the string returned by
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#repr" title=3D"repr"><code class=3D"xref py py-func docutils =
literal notranslate"><span class=3D"pre">repr()</span></code></a> using <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">\x</span></co=
de>, <code class=3D"docutils literal notranslate"><span class=3D"pre">\u</s=
pan></code> or <code class=3D"docutils literal notranslate"><span class=3D"=
pre">\U</span></code> escapes.  This generates a string
similar to that returned by <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/library/functions.html#repr" title=3D"repr"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">repr(=
)</span></code></a> in Python 2.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"bin">
<code class=3D"descname">bin</code><span class=3D"sig-paren">(</span><em>x<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/functions.html#bin" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Convert an integer number to a binary string prefixed with =E2=80=9C=
0b=E2=80=9D. The result
is a valid Python expression. If <em>x</em> is not a Python <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/library/functions.html#i=
nt" title=3D"int"><code class=3D"xref py py-class docutils literal notransl=
ate"><span class=3D"pre">int</span></code></a> object, it
has to define an <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/reference/datamodel.html#object.__index__" title=3D"object.__index_=
_"><code class=3D"xref py py-meth docutils literal notranslate"><span class=
=3D"pre">__index__()</span></code></a> method that returns an integer. Some
examples:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">bin<=
/span><span class=3D"p">(</span><span class=3D"mi">3</span><span class=3D"p=
">)</span>
<span class=3D"go">'0b11'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">bin</span><span c=
lass=3D"p">(</span><span class=3D"o">-</span><span class=3D"mi">10</span><s=
pan class=3D"p">)</span>
<span class=3D"go">'-0b1010'</span>
</pre></div>
</div>
<p>If prefix =E2=80=9C0b=E2=80=9D is desired or not, you can use either of =
the following ways.</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">form=
at</span><span class=3D"p">(</span><span class=3D"mi">14</span><span class=
=3D"p">,</span> <span class=3D"s1">'#b'</span><span class=3D"p">),</span> <=
span class=3D"nb">format</span><span class=3D"p">(</span><span class=3D"mi"=
>14</span><span class=3D"p">,</span> <span class=3D"s1">'b'</span><span cla=
ss=3D"p">)</span>
<span class=3D"go">('0b1110', '1110')</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">f</span><span clas=
s=3D"s1">'</span><span class=3D"si">{14:#b}</span><span class=3D"s1">'</spa=
n><span class=3D"p">,</span> <span class=3D"n">f</span><span class=3D"s1">'=
</span><span class=3D"si">{14:b}</span><span class=3D"s1">'</span>
<span class=3D"go">('0b1110', '1110')</span>
</pre></div>
</div>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/functions.html#format" title=3D"format"><code class=3D"xref py p=
y-func docutils literal notranslate"><span class=3D"pre">format()</span></c=
ode></a> for more information.</p>
</dd></dl>

<dl class=3D"class">
<dt id=3D"bool">
<em class=3D"property">class </em><code class=3D"descname">bool</code><span=
 class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>x</em><sp=
an class=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=3D=
"headerlink" href=3D"https://docs.python.org/3/library/functions.html#bool"=
 title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return a Boolean value, i.e. one of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">True</span></code> or <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">False</span></code>.  <em>x</e=
m> is converted
using the standard <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/stdtypes.html#truth"><span class=3D"std std-ref">truth te=
sting procedure</span></a>.  If <em>x</em> is false
or omitted, this returns <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">False</span></code>; otherwise it returns <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">True</span></code>.  The
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#bool" title=3D"bool"><code class=3D"xref py py-class docutils=
 literal notranslate"><span class=3D"pre">bool</span></code></a> class is a=
 subclass of <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/functions.html#int" title=3D"int"><code class=3D"xref py py-cla=
ss docutils literal notranslate"><span class=3D"pre">int</span></code></a> =
(see <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/stdtypes.html#typesnumeric"><span class=3D"std std-ref">Numeric Types =
=E2=80=94 int, float, complex</span></a>).
It cannot be subclassed further.  Its only instances are <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">False</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">True</span=
></code> (see <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/stdtypes.html#bltin-boolean-values"><span class=3D"std std-ref=
">Boolean Values</span></a>).</p>
<div class=3D"versionchanged" id=3D"index-0">
<p><span class=3D"versionmodified">Changed in version 3.7: </span><em>x</em=
> is now a positional-only parameter.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"breakpoint">
<code class=3D"descname">breakpoint</code><span class=3D"sig-paren">(</span=
><em>*args</em>, <em>**kws</em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.html#br=
eakpoint" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This function drops you into the debugger at the call site.  Specifi=
cally,
it calls <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
library/sys.html#sys.breakpointhook" title=3D"sys.breakpointhook"><code cla=
ss=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">sys=
.breakpointhook()</span></code></a>, passing <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">args</span></code> and <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">kws</span></code> straight
through.  By default, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">sys.breakpointhook()</span></code> calls
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/p=
db.html#pdb.set_trace" title=3D"pdb.set_trace"><code class=3D"xref py py-fu=
nc docutils literal notranslate"><span class=3D"pre">pdb.set_trace()</span>=
</code></a> expecting no arguments.  In this case, it is
purely a convenience function so you don=E2=80=99t have to explicitly impor=
t
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/p=
db.html#module-pdb" title=3D"pdb: The Python debugger for interactive inter=
preters."><code class=3D"xref py py-mod docutils literal notranslate"><span=
 class=3D"pre">pdb</span></code></a> or type as much code to enter the debu=
gger.  However,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
ys.html#sys.breakpointhook" title=3D"sys.breakpointhook"><code class=3D"xre=
f py py-func docutils literal notranslate"><span class=3D"pre">sys.breakpoi=
nthook()</span></code></a> can be set to some other function and
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#breakpoint" title=3D"breakpoint"><code class=3D"xref py py-fu=
nc docutils literal notranslate"><span class=3D"pre">breakpoint()</span></c=
ode></a> will automatically call that, allowing you to drop into
the debugger of choice.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.7.</span></p>
</div>
</dd></dl>

<span class=3D"target" id=3D"func-bytearray"></span><dl class=3D"class">
<dt>
<em class=3D"property">class </em><code class=3D"descname">bytearray</code>=
<span class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>sour=
ce</em><span class=3D"optional">[</span>, <em>encoding</em><span class=3D"o=
ptional">[</span>, <em>errors</em><span class=3D"optional">]</span><span cl=
ass=3D"optional">]</span><span class=3D"optional">]</span><span class=3D"si=
g-paren">)</span></dt>
<dd><p>Return a new array of bytes.  The <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/stdtypes.html#bytearray" title=3D"b=
ytearray"><code class=3D"xref py py-class docutils literal notranslate"><sp=
an class=3D"pre">bytearray</span></code></a> class is a mutable
sequence of integers in the range 0 &lt;=3D x &lt; 256.  It has most of the=
 usual
methods of mutable sequences, described in <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/library/stdtypes.html#typesseq-mutable"><=
span class=3D"std std-ref">Mutable Sequence Types</span></a>, as well
as most methods that the <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3/library/stdtypes.html#bytes" title=3D"bytes"><code class=3D=
"xref py py-class docutils literal notranslate"><span class=3D"pre">bytes</=
span></code></a> type has, see <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/stdtypes.html#bytes-methods"><span class=3D"s=
td std-ref">Bytes and Bytearray Operations</span></a>.</p>
<p>The optional <em>source</em> parameter can be used to initialize the arr=
ay in a few
different ways:</p>
<ul class=3D"simple">
<li>If it is a <em>string</em>, you must also give the <em>encoding</em> (a=
nd optionally,
<em>errors</em>) parameters; <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/stdtypes.html#bytearray" title=3D"bytearray"><c=
ode class=3D"xref py py-func docutils literal notranslate"><span class=3D"p=
re">bytearray()</span></code></a> then converts the string to
bytes using <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/stdtypes.html#str.encode" title=3D"str.encode"><code class=3D"xr=
ef py py-meth docutils literal notranslate"><span class=3D"pre">str.encode(=
)</span></code></a>.</li>
<li>If it is an <em>integer</em>, the array will have that size and will be
initialized with null bytes.</li>
<li>If it is an object conforming to the <em>buffer</em> interface, a read-=
only buffer
of the object will be used to initialize the bytes array.</li>
<li>If it is an <em>iterable</em>, it must be an iterable of integers in th=
e range
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span> <=
span class=3D"pre">&lt;=3D</span> <span class=3D"pre">x</span> <span class=
=3D"pre">&lt;</span> <span class=3D"pre">256</span></code>, which are used =
as the initial contents of the array.</li>
</ul>
<p>Without an argument, an array of size 0 is created.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/stdtypes.html#binaryseq"><span class=3D"std std-ref">Binary Sequ=
ence Types =E2=80=94 bytes, bytearray, memoryview</span></a> and <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/library/stdtypes.=
html#typebytearray"><span class=3D"std std-ref">Bytearray Objects</span></a=
>.</p>
</dd></dl>

<span class=3D"target" id=3D"func-bytes"></span><dl class=3D"class">
<dt>
<em class=3D"property">class </em><code class=3D"descname">bytes</code><spa=
n class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>source</=
em><span class=3D"optional">[</span>, <em>encoding</em><span class=3D"optio=
nal">[</span>, <em>errors</em><span class=3D"optional">]</span><span class=
=3D"optional">]</span><span class=3D"optional">]</span><span class=3D"sig-p=
aren">)</span></dt>
<dd><p>Return a new =E2=80=9Cbytes=E2=80=9D object, which is an immutable s=
equence of integers in
the range <code class=3D"docutils literal notranslate"><span class=3D"pre">=
0</span> <span class=3D"pre">&lt;=3D</span> <span class=3D"pre">x</span> <s=
pan class=3D"pre">&lt;</span> <span class=3D"pre">256</span></code>.  <a cl=
ass=3D"reference internal" href=3D"https://docs.python.org/3/library/stdtyp=
es.html#bytes" title=3D"bytes"><code class=3D"xref py py-class docutils lit=
eral notranslate"><span class=3D"pre">bytes</span></code></a> is an immutab=
le version of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#bytearray" title=3D"bytearray"><code class=3D"xref py py-class=
 docutils literal notranslate"><span class=3D"pre">bytearray</span></code><=
/a> =E2=80=93 it has the same non-mutating methods and the same
indexing and slicing behavior.</p>
<p>Accordingly, constructor arguments are interpreted as for <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/stdtypes.html#b=
ytearray" title=3D"bytearray"><code class=3D"xref py py-func docutils liter=
al notranslate"><span class=3D"pre">bytearray()</span></code></a>.</p>
<p>Bytes objects can also be created with literals, see <a class=3D"referen=
ce internal" href=3D"https://docs.python.org/3/reference/lexical_analysis.h=
tml#strings"><span class=3D"std std-ref">String and Bytes literals</span></=
a>.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/stdtypes.html#binaryseq"><span class=3D"std std-ref">Binary Sequ=
ence Types =E2=80=94 bytes, bytearray, memoryview</span></a>, <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/library/stdtypes.html#=
typebytes"><span class=3D"std std-ref">Bytes Objects</span></a>, and <a cla=
ss=3D"reference internal" href=3D"https://docs.python.org/3/library/stdtype=
s.html#bytes-methods"><span class=3D"std std-ref">Bytes and Bytearray Opera=
tions</span></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"callable">
<code class=3D"descname">callable</code><span class=3D"sig-paren">(</span><=
em>object</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hre=
f=3D"https://docs.python.org/3/library/functions.html#callable" title=3D"Pe=
rmalink to this definition">=C2=B6</a></dt>
<dd><p>Return <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/constants.html#True" title=3D"True"><code class=3D"xref py py-=
const docutils literal notranslate"><span class=3D"pre">True</span></code><=
/a> if the <em>object</em> argument appears callable,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/c=
onstants.html#False" title=3D"False"><code class=3D"xref py py-const docuti=
ls literal notranslate"><span class=3D"pre">False</span></code></a> if not.=
  If this returns true, it is still possible that a
call fails, but if it is false, calling <em>object</em> will never succeed.
Note that classes are callable (calling a class returns a new instance);
instances are callable if their class has a <a class=3D"reference internal"=
 href=3D"https://docs.python.org/3/reference/datamodel.html#object.__call__=
" title=3D"object.__call__"><code class=3D"xref py py-meth docutils literal=
 notranslate"><span class=3D"pre">__call__()</span></code></a> method.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.2: </span>This function=
 was first removed in Python 3.0 and then brought back
in Python 3.2.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"chr">
<code class=3D"descname">chr</code><span class=3D"sig-paren">(</span><em>i<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/functions.html#chr" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Return the string representing a character whose Unicode code point =
is the
integer <em>i</em>.  For example, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">chr(97)</span></code> returns the string <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">'a'</span></code>, w=
hile
<code class=3D"docutils literal notranslate"><span class=3D"pre">chr(8364)<=
/span></code> returns the string <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">'=E2=82=AC'</span></code>. This is the inverse of <a=
 class=3D"reference internal" href=3D"https://docs.python.org/3/library/fun=
ctions.html#ord" title=3D"ord"><code class=3D"xref py py-func docutils lite=
ral notranslate"><span class=3D"pre">ord()</span></code></a>.</p>
<p>The valid range for the argument is from 0 through 1,114,111 (0x10FFFF i=
n
base 16).  <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/library/exceptions.html#ValueError" title=3D"ValueError"><code class=3D"x=
ref py py-exc docutils literal notranslate"><span class=3D"pre">ValueError<=
/span></code></a> will be raised if <em>i</em> is outside that range.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"classmethod">
<code class=3D"descclassname">@</code><code class=3D"descname">classmethod<=
/code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/fun=
ctions.html#classmethod" title=3D"Permalink to this definition">=C2=B6</a><=
/dt>
<dd><p>Transform a method into a class method.</p>
<p>A class method receives the class as implicit first argument, just like =
an
instance method receives the instance. To declare a class method, use this
idiom:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">C</span><span class=3D"p">:</span>
    <span class=3D"nd">@classmethod</span>
    <span class=3D"k">def</span> <span class=3D"nf">f</span><span class=3D"=
p">(</span><span class=3D"bp">cls</span><span class=3D"p">,</span> <span cl=
ass=3D"n">arg1</span><span class=3D"p">,</span> <span class=3D"n">arg2</spa=
n><span class=3D"p">,</span> <span class=3D"o">...</span><span class=3D"p">=
):</span> <span class=3D"o">...</span>
</pre></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">@cl=
assmethod</span></code> form is a function <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/glossary.html#term-decorator"><span class=
=3D"xref std std-term">decorator</span></a> =E2=80=93 see the description
of function definitions in <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/reference/compound_stmts.html#function"><span class=3D"st=
d std-ref">Function definitions</span></a> for details.</p>
<p>It can be called either on the class (such as <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">C.f()</span></code>) or on an instan=
ce (such
as <code class=3D"docutils literal notranslate"><span class=3D"pre">C().f()=
</span></code>).  The instance is ignored except for its class. If a class
method is called for a derived class, the derived class object is passed as=
 the
implied first argument.</p>
<p>Class methods are different than C++ or Java static methods. If you want=
 those,
see <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#staticmethod" title=3D"staticmethod"><code class=3D"xref =
py py-func docutils literal notranslate"><span class=3D"pre">staticmethod()=
</span></code></a> in this section.</p>
<p>For more information on class methods, consult the documentation on the =
standard
type hierarchy in <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/reference/datamodel.html#types"><span class=3D"std std-ref">The st=
andard type hierarchy</span></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"compile">
<code class=3D"descname">compile</code><span class=3D"sig-paren">(</span><e=
m>source</em>, <em>filename</em>, <em>mode</em>, <em>flags=3D0</em>, <em>do=
nt_inherit=3DFalse</em>, <em>optimize=3D-1</em><span class=3D"sig-paren">)<=
/span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/fun=
ctions.html#compile" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Compile the <em>source</em> into a code or AST object.  Code objects=
 can be executed
by <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/functions.html#exec" title=3D"exec"><code class=3D"xref py py-func docuti=
ls literal notranslate"><span class=3D"pre">exec()</span></code></a> or <a =
class=3D"reference internal" href=3D"https://docs.python.org/3/library/func=
tions.html#eval" title=3D"eval"><code class=3D"xref py py-func docutils lit=
eral notranslate"><span class=3D"pre">eval()</span></code></a>.  <em>source=
</em> can either be a normal string, a
byte string, or an AST object.  Refer to the <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/library/ast.html#module-ast" title=3D"a=
st: Abstract Syntax Tree classes and manipulation."><code class=3D"xref py =
py-mod docutils literal notranslate"><span class=3D"pre">ast</span></code><=
/a> module documentation
for information on how to work with AST objects.</p>
<p>The <em>filename</em> argument should give the file from which the code =
was read;
pass some recognizable value if it wasn=E2=80=99t read from a file (<code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">'&lt;string&gt;'<=
/span></code> is
commonly used).</p>
<p>The <em>mode</em> argument specifies what kind of code must be compiled;=
 it can be
<code class=3D"docutils literal notranslate"><span class=3D"pre">'exec'</sp=
an></code> if <em>source</em> consists of a sequence of statements, <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">'eval'</span></co=
de> if it
consists of a single expression, or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">'single'</span></code> if it consists of a single
interactive statement (in the latter case, expression statements that
evaluate to something other than <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">None</span></code> will be printed).</p>
<p>The optional arguments <em>flags</em> and <em>dont_inherit</em> control =
which <a class=3D"reference internal" href=3D"https://docs.python.org/3/ref=
erence/simple_stmts.html#future"><span class=3D"std std-ref">future
statements</span></a> affect the compilation of <em>source</em>.  If neithe=
r
is present (or both are zero) the code is compiled with those future
statements that are in effect in the code that is calling <a class=3D"refer=
ence internal" href=3D"https://docs.python.org/3/library/functions.html#com=
pile" title=3D"compile"><code class=3D"xref py py-func docutils literal not=
ranslate"><span class=3D"pre">compile()</span></code></a>.  If the
<em>flags</em> argument is given and <em>dont_inherit</em> is not (or is ze=
ro) then the
future statements specified by the <em>flags</em> argument are used in addi=
tion to
those that would be used anyway. If <em>dont_inherit</em> is a non-zero int=
eger then
the <em>flags</em> argument is it =E2=80=93 the future statements in effect=
 around the call
to compile are ignored.</p>
<p>Future statements are specified by bits which can be bitwise ORed togeth=
er to
specify multiple statements.  The bitfield required to specify a given feat=
ure
can be found as the <code class=3D"xref py py-attr docutils literal notrans=
late"><span class=3D"pre">compiler_flag</span></code> attribute on
the <code class=3D"xref py py-class docutils literal notranslate"><span cla=
ss=3D"pre">_Feature</span></code> instance in the <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/library/__future__.html#module-__f=
uture__" title=3D"__future__: Future statement definitions"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">__future__=
</span></code></a> module.</p>
<p>The argument <em>optimize</em> specifies the optimization level of the c=
ompiler; the
default value of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-1</span></code> selects the optimization level of the interpreter=
 as
given by <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
using/cmdline.html#cmdoption-o"><code class=3D"xref std std-option docutils=
 literal notranslate"><span class=3D"pre">-O</span></code></a> options.  Ex=
plicit levels are <code class=3D"docutils literal notranslate"><span class=
=3D"pre">0</span></code> (no optimization;
<code class=3D"docutils literal notranslate"><span class=3D"pre">__debug__<=
/span></code> is true), <code class=3D"docutils literal notranslate"><span =
class=3D"pre">1</span></code> (asserts are removed, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">__debug__</span></code> is false)
or <code class=3D"docutils literal notranslate"><span class=3D"pre">2</span=
></code> (docstrings are removed too).</p>
<p>This function raises <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/exceptions.html#SyntaxError" title=3D"SyntaxError"><=
code class=3D"xref py py-exc docutils literal notranslate"><span class=3D"p=
re">SyntaxError</span></code></a> if the compiled source is invalid,
and <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/exceptions.html#ValueError" title=3D"ValueError"><code class=3D"xref py =
py-exc docutils literal notranslate"><span class=3D"pre">ValueError</span><=
/code></a> if the source contains null bytes.</p>
<p>If you want to parse Python code into its AST representation, see
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/a=
st.html#ast.parse" title=3D"ast.parse"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">ast.parse()</span></code></a>.=
</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">When compiling a string with multi-line code in <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">'single'</span></co=
de> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">'eval'</sp=
an></code> mode, input must be terminated by at least one newline
character.  This is to facilitate detection of incomplete and complete
statements in the <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/code.html#module-code" title=3D"code: Facilities to implem=
ent read-eval-print loops."><code class=3D"xref py py-mod docutils literal =
notranslate"><span class=3D"pre">code</span></code></a> module.</p>
</div>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<p class=3D"last">It is possible to crash the Python interpreter with a
sufficiently large/complex string when compiling to an AST
object due to stack depth limitations in Python=E2=80=99s AST compiler.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.2: </span>Allowed u=
se of Windows and Mac newlines.  Also input in <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">'exec'</span></code> mode
does not have to end in a newline anymore.  Added the <em>optimize</em> par=
ameter.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>Previousl=
y, <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/exceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-=
exc docutils literal notranslate"><span class=3D"pre">TypeError</span></cod=
e></a> was raised when null bytes were encountered
in <em>source</em>.</p>
</div>
</dd></dl>

<dl class=3D"class">
<dt id=3D"complex">
<em class=3D"property">class </em><code class=3D"descname">complex</code><s=
pan class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>real</=
em><span class=3D"optional">[</span>, <em>imag</em><span class=3D"optional"=
>]</span><span class=3D"optional">]</span><span class=3D"sig-paren">)</span=
><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/function=
s.html#complex" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return a complex number with the value <em>real</em> + <em>imag</em>=
*1j or convert a string
or number to a complex number.  If the first parameter is a string, it will
be interpreted as a complex number and the function must be called without =
a
second parameter.  The second parameter can never be a string. Each argumen=
t
may be any numeric type (including complex).  If <em>imag</em> is omitted, =
it
defaults to zero and the constructor serves as a numeric conversion like
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#int" title=3D"int"><code class=3D"xref py py-class docutils l=
iteral notranslate"><span class=3D"pre">int</span></code></a> and <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/library/functions=
.html#float" title=3D"float"><code class=3D"xref py py-class docutils liter=
al notranslate"><span class=3D"pre">float</span></code></a>.  If both argum=
ents are omitted, returns
<code class=3D"docutils literal notranslate"><span class=3D"pre">0j</span><=
/code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">When converting from a string, the string must not contai=
n whitespace
around the central <code class=3D"docutils literal notranslate"><span class=
=3D"pre">+</span></code> or <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">-</span></code> operator.  For example,
<code class=3D"docutils literal notranslate"><span class=3D"pre">complex('1=
+2j')</span></code> is fine, but <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">complex('1</span> <span class=3D"pre">+</span> <span=
 class=3D"pre">2j')</span></code> raises
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#ValueError" title=3D"ValueError"><code class=3D"xref py py-e=
xc docutils literal notranslate"><span class=3D"pre">ValueError</span></cod=
e></a>.</p>
</div>
<p>The complex type is described in <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/library/stdtypes.html#typesnumeric"><span class=
=3D"std std-ref">Numeric Types =E2=80=94 int, float, complex</span></a>.</p=
>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span>Grouping =
digits with underscores as in code literals is allowed.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"delattr">
<code class=3D"descname">delattr</code><span class=3D"sig-paren">(</span><e=
m>object</em>, <em>name</em><span class=3D"sig-paren">)</span><a class=3D"h=
eaderlink" href=3D"https://docs.python.org/3/library/functions.html#delattr=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This is a relative of <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/functions.html#setattr" title=3D"setattr"><code=
 class=3D"xref py py-func docutils literal notranslate"><span class=3D"pre"=
>setattr()</span></code></a>.  The arguments are an object and a
string.  The string must be the name of one of the object=E2=80=99s attribu=
tes.  The
function deletes the named attribute, provided the object allows it.  For
example, <code class=3D"docutils literal notranslate"><span class=3D"pre">d=
elattr(x,</span> <span class=3D"pre">'foobar')</span></code> is equivalent =
to <code class=3D"docutils literal notranslate"><span class=3D"pre">del</sp=
an> <span class=3D"pre">x.foobar</span></code>.</p>
</dd></dl>

<span class=3D"target" id=3D"func-dict"></span><dl class=3D"class">
<dt>
<em class=3D"property">class </em><code class=3D"descname">dict</code><span=
 class=3D"sig-paren">(</span><em>**kwarg</em><span class=3D"sig-paren">)</s=
pan></dt>
<dt>
<em class=3D"property">class </em><code class=3D"descname">dict</code><span=
 class=3D"sig-paren">(</span><em>mapping</em>, <em>**kwarg</em><span class=
=3D"sig-paren">)</span></dt>
<dt>
<em class=3D"property">class </em><code class=3D"descname">dict</code><span=
 class=3D"sig-paren">(</span><em>iterable</em>, <em>**kwarg</em><span class=
=3D"sig-paren">)</span></dt>
<dd><p>Create a new dictionary.  The <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/stdtypes.html#dict" title=3D"dict"><c=
ode class=3D"xref py py-class docutils literal notranslate"><span class=3D"=
pre">dict</span></code></a> object is the dictionary class.
See <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/stdtypes.html#dict" title=3D"dict"><code class=3D"xref py py-class docut=
ils literal notranslate"><span class=3D"pre">dict</span></code></a> and <a =
class=3D"reference internal" href=3D"https://docs.python.org/3/library/stdt=
ypes.html#typesmapping"><span class=3D"std std-ref">Mapping Types =E2=80=94=
 dict</span></a> for documentation about this class.</p>
<p>For other containers see the built-in <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/stdtypes.html#list" title=3D"list">=
<code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">list</span></code></a>, <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/library/stdtypes.html#set" title=3D"set"><code clas=
s=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">set=
</span></code></a>, and
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#tuple" title=3D"tuple"><code class=3D"xref py py-class docutil=
s literal notranslate"><span class=3D"pre">tuple</span></code></a> classes,=
 as well as the <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/collections.html#module-collections" title=3D"collections: C=
ontainer datatypes"><code class=3D"xref py py-mod docutils literal notransl=
ate"><span class=3D"pre">collections</span></code></a> module.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"dir">
<code class=3D"descname">dir</code><span class=3D"sig-paren">(</span><span =
class=3D"optional">[</span><em>object</em><span class=3D"optional">]</span>=
<span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://d=
ocs.python.org/3/library/functions.html#dir" title=3D"Permalink to this def=
inition">=C2=B6</a></dt>
<dd><p>Without arguments, return the list of names in the current local sco=
pe.  With an
argument, attempt to return a list of valid attributes for that object.</p>
<p>If the object has a method named <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/reference/datamodel.html#object.__dir__" title=
=3D"object.__dir__"><code class=3D"xref py py-meth docutils literal notrans=
late"><span class=3D"pre">__dir__()</span></code></a>, this method will be =
called and
must return the list of attributes. This allows objects that implement a cu=
stom
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__getattr__" title=3D"object.__getattr__"><code clas=
s=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">__ge=
tattr__()</span></code></a> or <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/reference/datamodel.html#object.__getattribute__" tit=
le=3D"object.__getattribute__"><code class=3D"xref py py-func docutils lite=
ral notranslate"><span class=3D"pre">__getattribute__()</span></code></a> f=
unction to customize the way
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#dir" title=3D"dir"><code class=3D"xref py py-func docutils li=
teral notranslate"><span class=3D"pre">dir()</span></code></a> reports thei=
r attributes.</p>
<p>If the object does not provide <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/reference/datamodel.html#object.__dir__" title=3D"=
object.__dir__"><code class=3D"xref py py-meth docutils literal notranslate=
"><span class=3D"pre">__dir__()</span></code></a>, the function tries its b=
est to
gather information from the object=E2=80=99s <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/library/stdtypes.html#object.__dict__" =
title=3D"object.__dict__"><code class=3D"xref py py-attr docutils literal n=
otranslate"><span class=3D"pre">__dict__</span></code></a> attribute, if de=
fined, and
from its type object.  The resulting list is not necessarily complete, and =
may
be inaccurate when the object has a custom <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/reference/datamodel.html#object.__getattr=
__" title=3D"object.__getattr__"><code class=3D"xref py py-func docutils li=
teral notranslate"><span class=3D"pre">__getattr__()</span></code></a>.</p>
<p>The default <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/functions.html#dir" title=3D"dir"><code class=3D"xref py py-f=
unc docutils literal notranslate"><span class=3D"pre">dir()</span></code></=
a> mechanism behaves differently with different types of
objects, as it attempts to produce the most relevant, rather than complete,
information:</p>
<ul class=3D"simple">
<li>If the object is a module object, the list contains the names of the mo=
dule=E2=80=99s
attributes.</li>
<li>If the object is a type or class object, the list contains the names of=
 its
attributes, and recursively of the attributes of its bases.</li>
<li>Otherwise, the list contains the object=E2=80=99s attributes=E2=80=99 n=
ames, the names of its
class=E2=80=99s attributes, and recursively of the attributes of its class=
=E2=80=99s base
classes.</li>
</ul>
<p>The resulting list is sorted alphabetically.  For example:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"kn">impo=
rt</span> <span class=3D"nn">struct</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">dir</span><span c=
lass=3D"p">()</span>   <span class=3D"c1"># show the names in the module na=
mespace  # doctest: +SKIP</span>
<span class=3D"go">['__builtins__', '__name__', 'struct']</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">dir</span><span c=
lass=3D"p">(</span><span class=3D"n">struct</span><span class=3D"p">)</span=
>   <span class=3D"c1"># show the names in the struct module # doctest: +SK=
IP</span>
<span class=3D"go">['Struct', '__all__', '__builtins__', '__cached__', '__d=
oc__', '__file__',</span>
<span class=3D"go"> '__initializing__', '__loader__', '__name__', '__packag=
e__',</span>
<span class=3D"go"> '_clearcache', 'calcsize', 'error', 'pack', 'pack_into'=
,</span>
<span class=3D"go"> 'unpack', 'unpack_from']</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">class</span> <span=
 class=3D"nc">Shape</span><span class=3D"p">:</span>
<span class=3D"gp">... </span>    <span class=3D"k">def</span> <span class=
=3D"nf">__dir__</span><span class=3D"p">(</span><span class=3D"bp">self</sp=
an><span class=3D"p">):</span>
<span class=3D"gp">... </span>        <span class=3D"k">return</span> <span=
 class=3D"p">[</span><span class=3D"s1">'area'</span><span class=3D"p">,</s=
pan> <span class=3D"s1">'perimeter'</span><span class=3D"p">,</span> <span =
class=3D"s1">'location'</span><span class=3D"p">]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">s</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">Shape</span><span class=3D"p">()</spa=
n>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">dir</span><span c=
lass=3D"p">(</span><span class=3D"n">s</span><span class=3D"p">)</span>
<span class=3D"go">['area', 'location', 'perimeter']</span>
</pre></div>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Because <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/functions.html#dir" title=3D"dir"><code class=3D"x=
ref py py-func docutils literal notranslate"><span class=3D"pre">dir()</spa=
n></code></a> is supplied primarily as a convenience for use at an
interactive prompt, it tries to supply an interesting set of names more
than it tries to supply a rigorously or consistently defined set of names,
and its detailed behavior may change across releases.  For example,
metaclass attributes are not in the result list when the argument is a
class.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"divmod">
<code class=3D"descname">divmod</code><span class=3D"sig-paren">(</span><em=
>a</em>, <em>b</em><span class=3D"sig-paren">)</span><a class=3D"headerlink=
" href=3D"https://docs.python.org/3/library/functions.html#divmod" title=3D=
"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Take two (non complex) numbers as arguments and return a pair of num=
bers
consisting of their quotient and remainder when using integer division.  Wi=
th
mixed operand types, the rules for binary arithmetic operators apply.  For
integers, the result is the same as <code class=3D"docutils literal notrans=
late"><span class=3D"pre">(a</span> <span class=3D"pre">//</span> <span cla=
ss=3D"pre">b,</span> <span class=3D"pre">a</span> <span class=3D"pre">%</sp=
an> <span class=3D"pre">b)</span></code>. For floating point
numbers the result is <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">(q,</span> <span class=3D"pre">a</span> <span class=3D"pre">%</=
span> <span class=3D"pre">b)</span></code>, where <em>q</em> is usually <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">math.floor(a<=
/span> <span class=3D"pre">/</span>
<span class=3D"pre">b)</span></code> but may be 1 less than that.  In any c=
ase <code class=3D"docutils literal notranslate"><span class=3D"pre">q</spa=
n> <span class=3D"pre">*</span> <span class=3D"pre">b</span> <span class=3D=
"pre">+</span> <span class=3D"pre">a</span> <span class=3D"pre">%</span> <s=
pan class=3D"pre">b</span></code> is very
close to <em>a</em>, if <code class=3D"docutils literal notranslate"><span =
class=3D"pre">a</span> <span class=3D"pre">%</span> <span class=3D"pre">b</=
span></code> is non-zero it has the same sign as <em>b</em>, and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">0</span>
<span class=3D"pre">&lt;=3D</span> <span class=3D"pre">abs(a</span> <span c=
lass=3D"pre">%</span> <span class=3D"pre">b)</span> <span class=3D"pre">&lt=
;</span> <span class=3D"pre">abs(b)</span></code>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"enumerate">
<code class=3D"descname">enumerate</code><span class=3D"sig-paren">(</span>=
<em>iterable</em>, <em>start=3D0</em><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.htm=
l#enumerate" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return an enumerate object. <em>iterable</em> must be a sequence, an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-iterator"><span class=3D"xref std std-term">iterator</span></a>, =
or some other object which supports iteration.
The <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/stdtypes.html#iterator.__next__" title=3D"iterator.__next__"><code class=
=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">__nex=
t__()</span></code></a> method of the iterator returned by
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#enumerate" title=3D"enumerate"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">enumerate()</span></code=
></a> returns a tuple containing a count (from <em>start</em> which
defaults to 0) and the values obtained from iterating over <em>iterable</em=
>.</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">seaso=
ns</span> <span class=3D"o">=3D</span> <span class=3D"p">[</span><span clas=
s=3D"s1">'Spring'</span><span class=3D"p">,</span> <span class=3D"s1">'Summ=
er'</span><span class=3D"p">,</span> <span class=3D"s1">'Fall'</span><span =
class=3D"p">,</span> <span class=3D"s1">'Winter'</span><span class=3D"p">]<=
/span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">list</span><span =
class=3D"p">(</span><span class=3D"nb">enumerate</span><span class=3D"p">(<=
/span><span class=3D"n">seasons</span><span class=3D"p">))</span>
<span class=3D"go">[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter'=
)]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">list</span><span =
class=3D"p">(</span><span class=3D"nb">enumerate</span><span class=3D"p">(<=
/span><span class=3D"n">seasons</span><span class=3D"p">,</span> <span clas=
s=3D"n">start</span><span class=3D"o">=3D</span><span class=3D"mi">1</span>=
<span class=3D"p">))</span>
<span class=3D"go">[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter'=
)]</span>
</pre></div>
</div>
<p>Equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">enumerate</span><span class=3D"p">(</span><span class=3D"n"=
>sequence</span><span class=3D"p">,</span> <span class=3D"n">start</span><s=
pan class=3D"o">=3D</span><span class=3D"mi">0</span><span class=3D"p">):</=
span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
n">start</span>
    <span class=3D"k">for</span> <span class=3D"n">elem</span> <span class=
=3D"ow">in</span> <span class=3D"n">sequence</span><span class=3D"p">:</spa=
n>
        <span class=3D"k">yield</span> <span class=3D"n">n</span><span clas=
s=3D"p">,</span> <span class=3D"n">elem</span>
        <span class=3D"n">n</span> <span class=3D"o">+=3D</span> <span clas=
s=3D"mi">1</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"eval">
<code class=3D"descname">eval</code><span class=3D"sig-paren">(</span><em>e=
xpression</em>, <em>globals=3DNone</em>, <em>locals=3DNone</em><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/library/functions.html#eval" title=3D"Permalink to this definition">=
=C2=B6</a></dt>
<dd><p>The arguments are a string and optional globals and locals.  If prov=
ided,
<em>globals</em> must be a dictionary.  If provided, <em>locals</em> can be=
 any mapping
object.</p>
<p>The <em>expression</em> argument is parsed and evaluated as a Python exp=
ression
(technically speaking, a condition list) using the <em>globals</em> and <em=
>locals</em>
dictionaries as global and local namespace.  If the <em>globals</em> dictio=
nary is
present and does not contain a value for the key <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">__builtins__</span></code>, a
reference to the dictionary of the built-in module <a class=3D"reference in=
ternal" href=3D"https://docs.python.org/3/library/builtins.html#module-buil=
tins" title=3D"builtins: The module that provides the built-in namespace.">=
<code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"=
pre">builtins</span></code></a> is
inserted under that key before <em>expression</em> is parsed.
This means that <em>expression</em> normally has full
access to the standard <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/builtins.html#module-builtins" title=3D"builtins: The=
 module that provides the built-in namespace."><code class=3D"xref py py-mo=
d docutils literal notranslate"><span class=3D"pre">builtins</span></code><=
/a> module and restricted environments are
propagated.  If the <em>locals</em> dictionary is omitted it defaults to th=
e <em>globals</em>
dictionary.  If both dictionaries are omitted, the expression is executed i=
n the
environment where <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/functions.html#eval" title=3D"eval"><code class=3D"xref py=
 py-func docutils literal notranslate"><span class=3D"pre">eval()</span></c=
ode></a> is called.  The return value is the result of
the evaluated expression. Syntax errors are reported as exceptions.  Exampl=
e:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">x</sp=
an> <span class=3D"o">=3D</span> <span class=3D"mi">1</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">eval</span><span =
class=3D"p">(</span><span class=3D"s1">'x+1'</span><span class=3D"p">)</spa=
n>
<span class=3D"go">2</span>
</pre></div>
</div>
<p>This function can also be used to execute arbitrary code objects (such a=
s
those created by <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/functions.html#compile" title=3D"compile"><code class=3D"xr=
ef py py-func docutils literal notranslate"><span class=3D"pre">compile()</=
span></code></a>).  In this case pass a code object instead
of a string.  If the code object has been compiled with <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">'exec'</span></code> as the
<em>mode</em> argument, <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/functions.html#eval" title=3D"eval"><code class=3D"x=
ref py py-func docutils literal notranslate"><span class=3D"pre">eval()</sp=
an></code></a>=E2=80=99s return value will be <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">None</span></code>.</p>
<p>Hints: dynamic execution of statements is supported by the <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/library/functions.html=
#exec" title=3D"exec"><code class=3D"xref py py-func docutils literal notra=
nslate"><span class=3D"pre">exec()</span></code></a>
function.  The <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/functions.html#globals" title=3D"globals"><code class=3D"xref=
 py py-func docutils literal notranslate"><span class=3D"pre">globals()</sp=
an></code></a> and <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/functions.html#locals" title=3D"locals"><code class=3D"xr=
ef py py-func docutils literal notranslate"><span class=3D"pre">locals()</s=
pan></code></a> functions
returns the current global and local dictionary, respectively, which may be
useful to pass around for use by <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/library/functions.html#eval" title=3D"eval"><code c=
lass=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">e=
val()</span></code></a> or <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#exec" title=3D"exec"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">exec(=
)</span></code></a>.</p>
<p>See <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/ast.html#ast.literal_eval" title=3D"ast.literal_eval"><code class=3D"=
xref py py-func docutils literal notranslate"><span class=3D"pre">ast.liter=
al_eval()</span></code></a> for a function that can safely evaluate strings
with expressions containing only literals.</p>
</dd></dl>

<span class=3D"target" id=3D"index-1"></span><dl class=3D"function">
<dt id=3D"exec">
<code class=3D"descname">exec</code><span class=3D"sig-paren">(</span><em>o=
bject</em><span class=3D"optional">[</span>, <em>globals</em><span class=3D=
"optional">[</span>, <em>locals</em><span class=3D"optional">]</span><span =
class=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=3D"he=
aderlink" href=3D"https://docs.python.org/3/library/functions.html#exec" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This function supports dynamic execution of Python code. <em>object<=
/em> must be
either a string or a code object.  If it is a string, the string is parsed =
as
a suite of Python statements which is then executed (unless a syntax error
occurs). <a class=3D"footnote-reference" href=3D"https://docs.python.org/3/=
library/functions.html#id2" id=3D"id1">[1]</a> If it is a code object, it i=
s simply executed.  In all cases,
the code that=E2=80=99s executed is expected to be valid as file input (see=
 the
section =E2=80=9CFile input=E2=80=9D in the Reference Manual). Be aware tha=
t the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/simple_stmts.html#return"><code class=3D"xref std std-keyword docutils lit=
eral notranslate"><span class=3D"pre">return</span></code></a> and <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/simple_=
stmts.html#yield"><code class=3D"xref std std-keyword docutils literal notr=
anslate"><span class=3D"pre">yield</span></code></a> statements may not be =
used outside of
function definitions even within the context of code passed to the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#exec" title=3D"exec"><code class=3D"xref py py-func docutils =
literal notranslate"><span class=3D"pre">exec()</span></code></a> function.=
 The return value is <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">None</span></code>.</p>
<p>In all cases, if the optional parts are omitted, the code is executed in=
 the
current scope.  If only <em>globals</em> is provided, it must be a dictiona=
ry, which
will be used for both the global and the local variables.  If <em>globals</=
em> and
<em>locals</em> are given, they are used for the global and local variables=
,
respectively.  If provided, <em>locals</em> can be any mapping object.  Rem=
ember
that at module level, globals and locals are the same dictionary. If exec
gets two separate objects as <em>globals</em> and <em>locals</em>, the code=
 will be
executed as if it were embedded in a class definition.</p>
<p>If the <em>globals</em> dictionary does not contain a value for the key
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtins=
__</span></code>, a reference to the dictionary of the built-in module
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/b=
uiltins.html#module-builtins" title=3D"builtins: The module that provides t=
he built-in namespace."><code class=3D"xref py py-mod docutils literal notr=
anslate"><span class=3D"pre">builtins</span></code></a> is inserted under t=
hat key.  That way you can control what
builtins are available to the executed code by inserting your own
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtins=
__</span></code> dictionary into <em>globals</em> before passing it to <a c=
lass=3D"reference internal" href=3D"https://docs.python.org/3/library/funct=
ions.html#exec" title=3D"exec"><code class=3D"xref py py-func docutils lite=
ral notranslate"><span class=3D"pre">exec()</span></code></a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The built-in functions <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/functions.html#globals" title=3D"gl=
obals"><code class=3D"xref py py-func docutils literal notranslate"><span c=
lass=3D"pre">globals()</span></code></a> and <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/library/functions.html#locals" title=3D=
"locals"><code class=3D"xref py py-func docutils literal notranslate"><span=
 class=3D"pre">locals()</span></code></a> return the current
global and local dictionary, respectively, which may be useful to pass arou=
nd
for use as the second and third argument to <a class=3D"reference internal"=
 href=3D"https://docs.python.org/3/library/functions.html#exec" title=3D"ex=
ec"><code class=3D"xref py py-func docutils literal notranslate"><span clas=
s=3D"pre">exec()</span></code></a>.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The default <em>locals</em> act as described for function=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/library/=
functions.html#locals" title=3D"locals"><code class=3D"xref py py-func docu=
tils literal notranslate"><span class=3D"pre">locals()</span></code></a> be=
low:
modifications to the default <em>locals</em> dictionary should not be attem=
pted.
Pass an explicit <em>locals</em> dictionary if you need to see effects of t=
he
code on <em>locals</em> after function <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/functions.html#exec" title=3D"exec"><=
code class=3D"xref py py-func docutils literal notranslate"><span class=3D"=
pre">exec()</span></code></a> returns.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"filter">
<code class=3D"descname">filter</code><span class=3D"sig-paren">(</span><em=
>function</em>, <em>iterable</em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.html#fi=
lter" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Construct an iterator from those elements of <em>iterable</em> for w=
hich <em>function</em>
returns true.  <em>iterable</em> may be either a sequence, a container whic=
h
supports iteration, or an iterator.  If <em>function</em> is <code class=3D=
"docutils literal notranslate"><span class=3D"pre">None</span></code>, the =
identity
function is assumed, that is, all elements of <em>iterable</em> that are fa=
lse are
removed.</p>
<p>Note that <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">filter(function,</span> <span class=3D"pre">iterable)</span></code> is e=
quivalent to the generator
expression <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>(item</span> <span class=3D"pre">for</span> <span class=3D"pre">item</span=
> <span class=3D"pre">in</span> <span class=3D"pre">iterable</span> <span c=
lass=3D"pre">if</span> <span class=3D"pre">function(item))</span></code> if=
 function is
not <code class=3D"docutils literal notranslate"><span class=3D"pre">None</=
span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">(item</span> <span class=3D"pre">for</span> <span class=3D"pre">it=
em</span> <span class=3D"pre">in</span> <span class=3D"pre">iterable</span>=
 <span class=3D"pre">if</span> <span class=3D"pre">item)</span></code> if f=
unction is
<code class=3D"docutils literal notranslate"><span class=3D"pre">None</span=
></code>.</p>
<p>See <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/itertools.html#itertools.filterfalse" title=3D"itertools.filterfalse"=
><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">itertools.filterfalse()</span></code></a> for the complementary fu=
nction that returns
elements of <em>iterable</em> for which <em>function</em> returns false.</p=
>
</dd></dl>

<dl class=3D"class">
<dt id=3D"float">
<em class=3D"property">class </em><code class=3D"descname">float</code><spa=
n class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>x</em><s=
pan class=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.html#fl=
oat" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p id=3D"index-2">Return a floating point number constructed from a num=
ber or string <em>x</em>.</p>
<p>If the argument is a string, it should contain a decimal number, optiona=
lly
preceded by a sign, and optionally embedded in whitespace.  The optional
sign may be <code class=3D"docutils literal notranslate"><span class=3D"pre=
">'+'</span></code> or <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">'-'</span></code>; a <code class=3D"docutils literal notransla=
te"><span class=3D"pre">'+'</span></code> sign has no effect on the value
produced.  The argument may also be a string representing a NaN
(not-a-number), or a positive or negative infinity.  More precisely, the
input must conform to the following grammar after leading and trailing
whitespace characters are removed:</p>
<pre><strong id=3D"grammar-token-sign">sign          </strong> ::=3D  "+" |=
 "-"
<strong id=3D"grammar-token-infinity">infinity      </strong> ::=3D  "Infin=
ity" | "inf"
<strong id=3D"grammar-token-nan">nan           </strong> ::=3D  "nan"
<strong id=3D"grammar-token-numeric-value">numeric_value </strong> ::=3D  <=
a class=3D"reference internal" href=3D"https://docs.python.org/3/reference/=
lexical_analysis.html#grammar-token-floatnumber"><code class=3D"xref docuti=
ls literal notranslate"><span class=3D"pre">floatnumber</span></code></a> |=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/library/=
functions.html#grammar-token-infinity"><code class=3D"xref docutils literal=
 notranslate"><span class=3D"pre">infinity</span></code></a> | <a class=3D"=
reference internal" href=3D"https://docs.python.org/3/library/functions.htm=
l#grammar-token-nan"><code class=3D"xref docutils literal notranslate"><spa=
n class=3D"pre">nan</span></code></a>
<strong id=3D"grammar-token-numeric-string">numeric_string</strong> ::=3D  =
[<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/=
functions.html#grammar-token-sign"><code class=3D"xref docutils literal not=
ranslate"><span class=3D"pre">sign</span></code></a>] <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/functions.html#grammar=
-token-numeric-value"><code class=3D"xref docutils literal notranslate"><sp=
an class=3D"pre">numeric_value</span></code></a>
</pre>
<p>Here <code class=3D"docutils literal notranslate"><span class=3D"pre">fl=
oatnumber</span></code> is the form of a Python floating-point literal,
described in <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/reference/lexical_analysis.html#floating"><span class=3D"std std-ref">F=
loating point literals</span></a>.  Case is not significant, so, for exampl=
e,
=E2=80=9Cinf=E2=80=9D, =E2=80=9CInf=E2=80=9D, =E2=80=9CINFINITY=E2=80=9D an=
d =E2=80=9CiNfINity=E2=80=9D are all acceptable spellings for
positive infinity.</p>
<p>Otherwise, if the argument is an integer or a floating point number, a
floating point number with the same value (within Python=E2=80=99s floating=
 point
precision) is returned.  If the argument is outside the range of a Python
float, an <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/exceptions.html#OverflowError" title=3D"OverflowError"><code class=
=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">Overfl=
owError</span></code></a> will be raised.</p>
<p>For a general Python object <code class=3D"docutils literal notranslate"=
><span class=3D"pre">x</span></code>, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">float(x)</span></code> delegates to
<code class=3D"docutils literal notranslate"><span class=3D"pre">x.__float_=
_()</span></code>.</p>
<p>If no argument is given, <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">0.0</span></code> is returned.</p>
<p>Examples:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2=
em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</sp=
an><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"=
nb">float</span><span class=3D"p">(</span><span class=3D"s1">'+1.23'</span>=
<span class=3D"p">)</span>
<span class=3D"go">1.23</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">float</span><span=
 class=3D"p">(</span><span class=3D"s1">'   -12345</span><span class=3D"se"=
>\n</span><span class=3D"s1">'</span><span class=3D"p">)</span>
<span class=3D"go">-12345.0</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">float</span><span=
 class=3D"p">(</span><span class=3D"s1">'1e-003'</span><span class=3D"p">)<=
/span>
<span class=3D"go">0.001</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">float</span><span=
 class=3D"p">(</span><span class=3D"s1">'+1E6'</span><span class=3D"p">)</s=
pan>
<span class=3D"go">1000000.0</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">float</span><span=
 class=3D"p">(</span><span class=3D"s1">'-Infinity'</span><span class=3D"p"=
>)</span>
<span class=3D"go">-inf</span>
</pre></div>
</div>
<p>The float type is described in <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/stdtypes.html#typesnumeric"><span class=3D=
"std std-ref">Numeric Types =E2=80=94 int, float, complex</span></a>.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span>Grouping =
digits with underscores as in code literals is allowed.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.7: </span><em>x</em=
> is now a positional-only parameter.</p>
</div>
</dd></dl>

<span class=3D"target" id=3D"index-3"></span><dl class=3D"function">
<dt id=3D"format">
<code class=3D"descname">format</code><span class=3D"sig-paren">(</span><em=
>value</em><span class=3D"optional">[</span>, <em>format_spec</em><span cla=
ss=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=3D"heade=
rlink" href=3D"https://docs.python.org/3/library/functions.html#format" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Convert a <em>value</em> to a =E2=80=9Cformatted=E2=80=9D representa=
tion, as controlled by
<em>format_spec</em>.  The interpretation of <em>format_spec</em> will depe=
nd on the type
of the <em>value</em> argument, however there is a standard formatting synt=
ax that
is used by most built-in types: <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/library/string.html#formatspec"><span class=3D"std s=
td-ref">Format Specification Mini-Language</span></a>.</p>
<p>The default <em>format_spec</em> is an empty string which usually gives =
the same
effect as calling <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/stdtypes.html#str" title=3D"str"><code class=3D"xref py py=
-func docutils literal notranslate"><span class=3D"pre">str(value)</span></=
code></a>.</p>
<p>A call to <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">format(value,</span> <span class=3D"pre">format_spec)</span></code> is t=
ranslated to
<code class=3D"docutils literal notranslate"><span class=3D"pre">type(value=
).__format__(value,</span> <span class=3D"pre">format_spec)</span></code> w=
hich bypasses the instance
dictionary when searching for the value=E2=80=99s <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/reference/datamodel.html#object.__=
format__" title=3D"object.__format__"><code class=3D"xref py py-meth docuti=
ls literal notranslate"><span class=3D"pre">__format__()</span></code></a> =
method.  A
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">TypeError</span></code><=
/a> exception is raised if the method search reaches
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#object" title=3D"object"><code class=3D"xref py py-mod docuti=
ls literal notranslate"><span class=3D"pre">object</span></code></a> and th=
e <em>format_spec</em> is non-empty, or if either the
<em>format_spec</em> or the return value are not strings.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.4: </span><code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">object().__format__=
(format_spec)</span></code> raises <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/library/exceptions.html#TypeError" title=3D"TypeE=
rror"><code class=3D"xref py py-exc docutils literal notranslate"><span cla=
ss=3D"pre">TypeError</span></code></a>
if <em>format_spec</em> is not an empty string.</p>
</div>
</dd></dl>

<span class=3D"target" id=3D"func-frozenset"></span><dl class=3D"class">
<dt>
<em class=3D"property">class </em><code class=3D"descname">frozenset</code>=
<span class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>iter=
able</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</span=
></dt>
<dd><p>Return a new <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/stdtypes.html#frozenset" title=3D"frozenset"><code class=
=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">froz=
enset</span></code></a> object, optionally with elements taken from
<em>iterable</em>.  <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">frozenset</span></code> is a built-in class.  See <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/library/stdtypes.html#fr=
ozenset" title=3D"frozenset"><code class=3D"xref py py-class docutils liter=
al notranslate"><span class=3D"pre">frozenset</span></code></a> and
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#types-set"><span class=3D"std std-ref">Set Types =E2=80=94 set=
, frozenset</span></a> for documentation about this class.</p>
<p>For other containers see the built-in <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/stdtypes.html#set" title=3D"set"><c=
ode class=3D"xref py py-class docutils literal notranslate"><span class=3D"=
pre">set</span></code></a>, <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/library/stdtypes.html#list" title=3D"list"><code class=
=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">list=
</span></code></a>,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#tuple" title=3D"tuple"><code class=3D"xref py py-class docutil=
s literal notranslate"><span class=3D"pre">tuple</span></code></a>, and <a =
class=3D"reference internal" href=3D"https://docs.python.org/3/library/stdt=
ypes.html#dict" title=3D"dict"><code class=3D"xref py py-class docutils lit=
eral notranslate"><span class=3D"pre">dict</span></code></a> classes, as we=
ll as the <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/collections.html#module-collections" title=3D"collections: Contain=
er datatypes"><code class=3D"xref py py-mod docutils literal notranslate"><=
span class=3D"pre">collections</span></code></a>
module.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"getattr">
<code class=3D"descname">getattr</code><span class=3D"sig-paren">(</span><e=
m>object</em>, <em>name</em><span class=3D"optional">[</span>, <em>default<=
/em><span class=3D"optional">]</span><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.htm=
l#getattr" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return the value of the named attribute of <em>object</em>.  <em>nam=
e</em> must be a string.
If the string is the name of one of the object=E2=80=99s attributes, the re=
sult is the
value of that attribute.  For example, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">getattr(x,</span> <span class=3D"pre">'foobar'=
)</span></code> is equivalent to
<code class=3D"docutils literal notranslate"><span class=3D"pre">x.foobar</=
span></code>.  If the named attribute does not exist, <em>default</em> is r=
eturned if
provided, otherwise <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/exceptions.html#AttributeError" title=3D"AttributeError"=
><code class=3D"xref py py-exc docutils literal notranslate"><span class=3D=
"pre">AttributeError</span></code></a> is raised.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"globals">
<code class=3D"descname">globals</code><span class=3D"sig-paren">(</span><s=
pan class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/library/functions.html#globals" title=3D"Permalink to this d=
efinition">=C2=B6</a></dt>
<dd><p>Return a dictionary representing the current global symbol table. Th=
is is always
the dictionary of the current module (inside a function or method, this is =
the
module where it is defined, not the module from which it is called).</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"hasattr">
<code class=3D"descname">hasattr</code><span class=3D"sig-paren">(</span><e=
m>object</em>, <em>name</em><span class=3D"sig-paren">)</span><a class=3D"h=
eaderlink" href=3D"https://docs.python.org/3/library/functions.html#hasattr=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>The arguments are an object and a string.  The result is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">True</span></code> if=
 the
string is the name of one of the object=E2=80=99s attributes, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">False</span></code> i=
f not. (This
is implemented by calling <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">getattr(object,</span> <span class=3D"pre">name)</span></co=
de> and seeing whether it
raises an <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/exceptions.html#AttributeError" title=3D"AttributeError"><code cla=
ss=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">Attr=
ibuteError</span></code></a> or not.)</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"hash">
<code class=3D"descname">hash</code><span class=3D"sig-paren">(</span><em>o=
bject</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D=
"https://docs.python.org/3/library/functions.html#hash" title=3D"Permalink =
to this definition">=C2=B6</a></dt>
<dd><p>Return the hash value of the object (if it has one).  Hash values ar=
e
integers.  They are used to quickly compare dictionary keys during a
dictionary lookup.  Numeric values that compare equal have the same hash
value (even if they are of different types, as is the case for 1 and 1.0).<=
/p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">For objects with custom <a class=3D"reference internal" h=
ref=3D"https://docs.python.org/3/reference/datamodel.html#object.__hash__" =
title=3D"object.__hash__"><code class=3D"xref py py-meth docutils literal n=
otranslate"><span class=3D"pre">__hash__()</span></code></a> methods, note =
that <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/functions.html#hash" title=3D"hash"><code class=3D"xref py py-func docu=
tils literal notranslate"><span class=3D"pre">hash()</span></code></a>
truncates the return value based on the bit width of the host machine.
See <a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/datamodel.html#object.__hash__" title=3D"object.__hash__"><code class=
=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">__has=
h__()</span></code></a> for details.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"help">
<code class=3D"descname">help</code><span class=3D"sig-paren">(</span><span=
 class=3D"optional">[</span><em>object</em><span class=3D"optional">]</span=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://=
docs.python.org/3/library/functions.html#help" title=3D"Permalink to this d=
efinition">=C2=B6</a></dt>
<dd><p>Invoke the built-in help system.  (This function is intended for int=
eractive
use.)  If no argument is given, the interactive help system starts on the
interpreter console.  If the argument is a string, then the string is looke=
d up
as the name of a module, function, class, method, keyword, or documentation
topic, and a help page is printed on the console.  If the argument is any o=
ther
kind of object, a help page on the object is generated.</p>
<p>Note that if a slash(/) appears in the parameter list of a function, whe=
n
invoking <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
library/functions.html#help" title=3D"help"><code class=3D"xref py py-func =
docutils literal notranslate"><span class=3D"pre">help()</span></code></a>,=
 it means that the parameters prior to the slash are
positional-only. For more info, see
<a class=3D"reference internal" href=3D"https://docs.python.org/3/faq/progr=
amming.html#faq-positional-only-arguments"><span class=3D"std std-ref">the =
FAQ entry on positional-only parameters</span></a>.</p>
<p>This function is added to the built-in namespace by the <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/library/site.html#module-=
site" title=3D"site: Module responsible for site-specific configuration."><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">site</span></code></a> module.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.4: </span>Changes t=
o <a class=3D"reference internal" href=3D"https://docs.python.org/3/library=
/pydoc.html#module-pydoc" title=3D"pydoc: Documentation generator and onlin=
e help system."><code class=3D"xref py py-mod docutils literal notranslate"=
><span class=3D"pre">pydoc</span></code></a> and <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/library/inspect.html#module-inspect=
" title=3D"inspect: Extract information and source code from live objects."=
><code class=3D"xref py py-mod docutils literal notranslate"><span class=3D=
"pre">inspect</span></code></a> mean that the reported
signatures for callables are now more comprehensive and consistent.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"hex">
<code class=3D"descname">hex</code><span class=3D"sig-paren">(</span><em>x<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/functions.html#hex" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Convert an integer number to a lowercase hexadecimal string prefixed=
 with
=E2=80=9C0x=E2=80=9D. If <em>x</em> is not a Python <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/library/functions.html#int" titl=
e=3D"int"><code class=3D"xref py py-class docutils literal notranslate"><sp=
an class=3D"pre">int</span></code></a> object, it has to define an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__index__" title=3D"object.__index__"><code class=3D=
"xref py py-meth docutils literal notranslate"><span class=3D"pre">__index_=
_()</span></code></a> method that returns an integer. Some examples:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">hex<=
/span><span class=3D"p">(</span><span class=3D"mi">255</span><span class=3D=
"p">)</span>
<span class=3D"go">'0xff'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">hex</span><span c=
lass=3D"p">(</span><span class=3D"o">-</span><span class=3D"mi">42</span><s=
pan class=3D"p">)</span>
<span class=3D"go">'-0x2a'</span>
</pre></div>
</div>
<p>If you want to convert an integer number to an uppercase or lower hexade=
cimal
string with prefix or not, you can use either of the following ways:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"s1">'</s=
pan><span class=3D"si">%#x</span><span class=3D"s1">'</span> <span class=3D=
"o">%</span> <span class=3D"mi">255</span><span class=3D"p">,</span> <span =
class=3D"s1">'</span><span class=3D"si">%x</span><span class=3D"s1">'</span=
> <span class=3D"o">%</span> <span class=3D"mi">255</span><span class=3D"p"=
>,</span> <span class=3D"s1">'</span><span class=3D"si">%X</span><span clas=
s=3D"s1">'</span> <span class=3D"o">%</span> <span class=3D"mi">255</span>
<span class=3D"go">('0xff', 'ff', 'FF')</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">format</span><spa=
n class=3D"p">(</span><span class=3D"mi">255</span><span class=3D"p">,</spa=
n> <span class=3D"s1">'#x'</span><span class=3D"p">),</span> <span class=3D=
"nb">format</span><span class=3D"p">(</span><span class=3D"mi">255</span><s=
pan class=3D"p">,</span> <span class=3D"s1">'x'</span><span class=3D"p">),<=
/span> <span class=3D"nb">format</span><span class=3D"p">(</span><span clas=
s=3D"mi">255</span><span class=3D"p">,</span> <span class=3D"s1">'X'</span>=
<span class=3D"p">)</span>
<span class=3D"go">('0xff', 'ff', 'FF')</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">f</span><span clas=
s=3D"s1">'</span><span class=3D"si">{255:#x}</span><span class=3D"s1">'</sp=
an><span class=3D"p">,</span> <span class=3D"n">f</span><span class=3D"s1">=
'</span><span class=3D"si">{255:x}</span><span class=3D"s1">'</span><span c=
lass=3D"p">,</span> <span class=3D"n">f</span><span class=3D"s1">'</span><s=
pan class=3D"si">{255:X}</span><span class=3D"s1">'</span>
<span class=3D"go">('0xff', 'ff', 'FF')</span>
</pre></div>
</div>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/functions.html#format" title=3D"format"><code class=3D"xref py p=
y-func docutils literal notranslate"><span class=3D"pre">format()</span></c=
ode></a> for more information.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/functions.html#int" title=3D"int"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">int()</span></code></a> =
for converting a hexadecimal string to an
integer using a base of 16.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">To obtain a hexadecimal string representation for a float=
, use the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#float.hex" title=3D"float.hex"><code class=3D"xref py py-meth =
docutils literal notranslate"><span class=3D"pre">float.hex()</span></code>=
</a> method.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"id">
<code class=3D"descname">id</code><span class=3D"sig-paren">(</span><em>obj=
ect</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"h=
ttps://docs.python.org/3/library/functions.html#id" title=3D"Permalink to t=
his definition">=C2=B6</a></dt>
<dd><p>Return the =E2=80=9Cidentity=E2=80=9D of an object.  This is an inte=
ger which
is guaranteed to be unique and constant for this object during its lifetime=
.
Two objects with non-overlapping lifetimes may have the same <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/functions.html#=
id" title=3D"id"><code class=3D"xref py py-func docutils literal notranslat=
e"><span class=3D"pre">id()</span></code></a>
value.</p>
<div class=3D"impl-detail compound">
<p><strong>CPython implementation detail:</strong> This is the address of t=
he object in memory.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"input">
<code class=3D"descname">input</code><span class=3D"sig-paren">(</span><spa=
n class=3D"optional">[</span><em>prompt</em><span class=3D"optional">]</spa=
n><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https:/=
/docs.python.org/3/library/functions.html#input" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>If the <em>prompt</em> argument is present, it is written to standar=
d output without
a trailing newline.  The function then reads a line from input, converts it
to a string (stripping a trailing newline), and returns that.  When EOF is
read, <a class=3D"reference internal" href=3D"https://docs.python.org/3/lib=
rary/exceptions.html#EOFError" title=3D"EOFError"><code class=3D"xref py py=
-exc docutils literal notranslate"><span class=3D"pre">EOFError</span></cod=
e></a> is raised.  Example:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2=
em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</sp=
an><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"=
n">s</span> <span class=3D"o">=3D</span> <span class=3D"nb">input</span><sp=
an class=3D"p">(</span><span class=3D"s1">'--&gt; '</span><span class=3D"p"=
>)</span> =20
<span class=3D"go">--&gt; Monty Python's Flying Circus</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">s</span> =20
<span class=3D"go">"Monty Python's Flying Circus"</span>
</pre></div>
</div>
<p>If the <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/readline.html#module-readline" title=3D"readline: GNU readline sup=
port for Python. (Unix)"><code class=3D"xref py py-mod docutils literal not=
ranslate"><span class=3D"pre">readline</span></code></a> module was loaded,=
 then <a class=3D"reference internal" href=3D"https://docs.python.org/3/lib=
rary/functions.html#input" title=3D"input"><code class=3D"xref py py-func d=
ocutils literal notranslate"><span class=3D"pre">input()</span></code></a> =
will use it
to provide elaborate line editing and history features.</p>
</dd></dl>

<dl class=3D"class">
<dt id=3D"int">
<em class=3D"property">class </em><code class=3D"descname">int</code><span =
class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>x</em><spa=
n class=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=3D"=
headerlink" href=3D"https://docs.python.org/3/library/functions.html#int" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dt>
<em class=3D"property">class </em><code class=3D"descname">int</code><span =
class=3D"sig-paren">(</span><em>x</em>, <em>base=3D10</em><span class=3D"si=
g-paren">)</span></dt>
<dd><p>Return an integer object constructed from a number or string <em>x</=
em>, or return
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code> if no arguments are given.  If <em>x</em> defines <a class=3D"referen=
ce internal" href=3D"https://docs.python.org/3/reference/datamodel.html#obj=
ect.__int__" title=3D"object.__int__"><code class=3D"xref py py-meth docuti=
ls literal notranslate"><span class=3D"pre">__int__()</span></code></a>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">int(x)</sp=
an></code> returns <code class=3D"docutils literal notranslate"><span class=
=3D"pre">x.__int__()</span></code>.  If <em>x</em> defines <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/reference/datamodel.html#=
object.__trunc__" title=3D"object.__trunc__"><code class=3D"xref py py-meth=
 docutils literal notranslate"><span class=3D"pre">__trunc__()</span></code=
></a>,
it returns <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>x.__trunc__()</span></code>.
For floating point numbers, this truncates towards zero.</p>
<p>If <em>x</em> is not a number or if <em>base</em> is given, then <em>x</=
em> must be a string,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#bytes" title=3D"bytes"><code class=3D"xref py py-class docutil=
s literal notranslate"><span class=3D"pre">bytes</span></code></a>, or <a c=
lass=3D"reference internal" href=3D"https://docs.python.org/3/library/stdty=
pes.html#bytearray" title=3D"bytearray"><code class=3D"xref py py-class doc=
utils literal notranslate"><span class=3D"pre">bytearray</span></code></a> =
instance representing an <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3/reference/lexical_analysis.html#integers"><span class=3D"st=
d std-ref">integer
literal</span></a> in radix <em>base</em>.  Optionally, the literal can be
preceded by <code class=3D"docutils literal notranslate"><span class=3D"pre=
">+</span></code> or <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">-</span></code> (with no space in between) and surrounded by
whitespace.  A base-n literal consists of the digits 0 to n-1, with <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">a</span></code>
to <code class=3D"docutils literal notranslate"><span class=3D"pre">z</span=
></code> (or <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">A</span></code> to <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">Z</span></code>) having
values 10 to 35.  The default <em>base</em> is 10. The allowed values are 0=
 and 2=E2=80=9336.
Base-2, -8, and -16 literals can be optionally prefixed with <code class=3D=
"docutils literal notranslate"><span class=3D"pre">0b</span></code>/<code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">0B</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">0o</span><=
/code>/<code class=3D"docutils literal notranslate"><span class=3D"pre">0O<=
/span></code>, or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">0x</span></code>/<code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">0X</span></code>, as with integer literals in code.  Base 0
means to interpret exactly as a code literal, so that the actual base is 2,
8, 10, or 16, and so that <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">int('010',</span> <span class=3D"pre">0)</span></code> is n=
ot legal, while
<code class=3D"docutils literal notranslate"><span class=3D"pre">int('010')=
</span></code> is, as well as <code class=3D"docutils literal notranslate">=
<span class=3D"pre">int('010',</span> <span class=3D"pre">8)</span></code>.=
</p>
<p>The integer type is described in <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/library/stdtypes.html#typesnumeric"><span class=
=3D"std std-ref">Numeric Types =E2=80=94 int, float, complex</span></a>.</p=
>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.4: </span>If <em>ba=
se</em> is not an instance of <a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/functions.html#int" title=3D"int"><code class=
=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">int<=
/span></code></a> and the <em>base</em> object has a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__index__" title=3D"object.__index__"><code class=3D=
"xref py py-meth docutils literal notranslate"><span class=3D"pre">base.__i=
ndex__</span></code></a> method, that method is called
to obtain an integer for the base.  Previous versions used
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__int__" title=3D"object.__int__"><code class=3D"xre=
f py py-meth docutils literal notranslate"><span class=3D"pre">base.__int__=
</span></code></a> instead of <a class=3D"reference internal" href=3D"https=
://docs.python.org/3/reference/datamodel.html#object.__index__" title=3D"ob=
ject.__index__"><code class=3D"xref py py-meth docutils literal notranslate=
"><span class=3D"pre">base.__index__</span></code></a>.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span>Grouping =
digits with underscores as in code literals is allowed.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.7: </span><em>x</em=
> is now a positional-only parameter.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"isinstance">
<code class=3D"descname">isinstance</code><span class=3D"sig-paren">(</span=
><em>object</em>, <em>classinfo</em><span class=3D"sig-paren">)</span><a cl=
ass=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.html=
#isinstance" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return true if the <em>object</em> argument is an instance of the <e=
m>classinfo</em>
argument, or of a (direct, indirect or <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/glossary.html#term-abstract-base-class"><span=
 class=3D"xref std std-term">virtual</span></a>) subclass thereof.  If <em>=
object</em> is not
an object of the given type, the function always returns false.
If <em>classinfo</em> is a tuple of type objects (or recursively, other suc=
h
tuples), return true if <em>object</em> is an instance of any of the types.
If <em>classinfo</em> is not a type or tuple of types and such tuples,
a <a class=3D"reference internal" href=3D"https://docs.python.org/3/library=
/exceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-e=
xc docutils literal notranslate"><span class=3D"pre">TypeError</span></code=
></a> exception is raised.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"issubclass">
<code class=3D"descname">issubclass</code><span class=3D"sig-paren">(</span=
><em>class</em>, <em>classinfo</em><span class=3D"sig-paren">)</span><a cla=
ss=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.html#=
issubclass" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return true if <em>class</em> is a subclass (direct, indirect or <a =
class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.htm=
l#term-abstract-base-class"><span class=3D"xref std std-term">virtual</span=
></a>) of <em>classinfo</em>.  A
class is considered a subclass of itself. <em>classinfo</em> may be a tuple=
 of class
objects, in which case every entry in <em>classinfo</em> will be checked. I=
n any other
case, a <a class=3D"reference internal" href=3D"https://docs.python.org/3/l=
ibrary/exceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref p=
y py-exc docutils literal notranslate"><span class=3D"pre">TypeError</span>=
</code></a> exception is raised.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"iter">
<code class=3D"descname">iter</code><span class=3D"sig-paren">(</span><em>o=
bject</em><span class=3D"optional">[</span>, <em>sentinel</em><span class=
=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=3D"headerl=
ink" href=3D"https://docs.python.org/3/library/functions.html#iter" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return an <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/glossary.html#term-iterator"><span class=3D"xref std std-term">iter=
ator</span></a> object.  The first argument is interpreted very
differently depending on the presence of the second argument. Without a
second argument, <em>object</em> must be a collection object which supports=
 the
iteration protocol (the <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/reference/datamodel.html#object.__iter__" title=3D"object.__=
iter__"><code class=3D"xref py py-meth docutils literal notranslate"><span =
class=3D"pre">__iter__()</span></code></a> method), or it must support the
sequence protocol (the <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/reference/datamodel.html#object.__getitem__" title=3D"object.=
__getitem__"><code class=3D"xref py py-meth docutils literal notranslate"><=
span class=3D"pre">__getitem__()</span></code></a> method with integer argu=
ments
starting at <code class=3D"docutils literal notranslate"><span class=3D"pre=
">0</span></code>).  If it does not support either of those protocols,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">TypeError</span></code><=
/a> is raised. If the second argument, <em>sentinel</em>, is given,
then <em>object</em> must be a callable object.  The iterator created in th=
is case
will call <em>object</em> with no arguments for each call to its
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#iterator.__next__" title=3D"iterator.__next__"><code class=3D"=
xref py py-meth docutils literal notranslate"><span class=3D"pre">__next__(=
)</span></code></a> method; if the value returned is equal to
<em>sentinel</em>, <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/exceptions.html#StopIteration" title=3D"StopIteration"><c=
ode class=3D"xref py py-exc docutils literal notranslate"><span class=3D"pr=
e">StopIteration</span></code></a> will be raised, otherwise the value will
be returned.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/stdtypes.html#typeiter"><span class=3D"std std-ref">Iterator Typ=
es</span></a>.</p>
<p>One useful application of the second form of <a class=3D"reference inter=
nal" href=3D"https://docs.python.org/3/library/functions.html#iter" title=
=3D"iter"><code class=3D"xref py py-func docutils literal notranslate"><spa=
n class=3D"pre">iter()</span></code></a> is to build a
block-reader. For example, reading fixed-width blocks from a binary
database file until the end of file is reached:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">functools</span> <span class=3D"k">import</span> <span cl=
ass=3D"n">partial</span>
<span class=3D"k">with</span> <span class=3D"nb">open</span><span class=3D"=
p">(</span><span class=3D"s1">'mydata.db'</span><span class=3D"p">,</span> =
<span class=3D"s1">'rb'</span><span class=3D"p">)</span> <span class=3D"k">=
as</span> <span class=3D"n">f</span><span class=3D"p">:</span>
    <span class=3D"k">for</span> <span class=3D"n">block</span> <span class=
=3D"ow">in</span> <span class=3D"nb">iter</span><span class=3D"p">(</span><=
span class=3D"n">partial</span><span class=3D"p">(</span><span class=3D"n">=
f</span><span class=3D"o">.</span><span class=3D"n">read</span><span class=
=3D"p">,</span> <span class=3D"mi">64</span><span class=3D"p">),</span> <sp=
an class=3D"sa">b</span><span class=3D"s1">''</span><span class=3D"p">):</s=
pan>
        <span class=3D"n">process_block</span><span class=3D"p">(</span><sp=
an class=3D"n">block</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"len">
<code class=3D"descname">len</code><span class=3D"sig-paren">(</span><em>s<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/functions.html#len" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Return the length (the number of items) of an object.  The argument =
may be a
sequence (such as a string, bytes, tuple, list, or range) or a collection
(such as a dictionary, set, or frozen set).</p>
</dd></dl>

<span class=3D"target" id=3D"func-list"></span><dl class=3D"class">
<dt>
<em class=3D"property">class </em><code class=3D"descname">list</code><span=
 class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>iterable<=
/em><span class=3D"optional">]</span><span class=3D"sig-paren">)</span></dt=
>
<dd><p>Rather than being a function, <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/stdtypes.html#list" title=3D"list"><c=
ode class=3D"xref py py-class docutils literal notranslate"><span class=3D"=
pre">list</span></code></a> is actually a mutable
sequence type, as documented in <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/library/stdtypes.html#typesseq-list"><span class=3D"=
std std-ref">Lists</span></a> and <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/stdtypes.html#typesseq"><span class=3D"std=
 std-ref">Sequence Types =E2=80=94 list, tuple, range</span></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"locals">
<code class=3D"descname">locals</code><span class=3D"sig-paren">(</span><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs=
.python.org/3/library/functions.html#locals" title=3D"Permalink to this def=
inition">=C2=B6</a></dt>
<dd><p>Update and return a dictionary representing the current local symbol=
 table.
Free variables are returned by <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/functions.html#locals" title=3D"locals"><code=
 class=3D"xref py py-func docutils literal notranslate"><span class=3D"pre"=
>locals()</span></code></a> when it is called in function
blocks, but not in class blocks.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The contents of this dictionary should not be modified; c=
hanges may not
affect the values of local and free variables used by the interpreter.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"map">
<code class=3D"descname">map</code><span class=3D"sig-paren">(</span><em>fu=
nction</em>, <em>iterable</em>, <em>...</em><span class=3D"sig-paren">)</sp=
an><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/functi=
ons.html#map" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return an iterator that applies <em>function</em> to every item of <=
em>iterable</em>,
yielding the results.  If additional <em>iterable</em> arguments are passed=
,
<em>function</em> must take that many arguments and is applied to the items=
 from all
iterables in parallel.  With multiple iterables, the iterator stops when th=
e
shortest iterable is exhausted.  For cases where the function inputs are
already arranged into argument tuples, see <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/library/itertools.html#itertools.starmap"=
 title=3D"itertools.starmap"><code class=3D"xref py py-func docutils litera=
l notranslate"><span class=3D"pre">itertools.starmap()</span></code></a>.</=
p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"max">
<code class=3D"descname">max</code><span class=3D"sig-paren">(</span><em>it=
erable</em>, <em>*</em><span class=3D"optional">[</span>, <em>key</em>, <em=
>default</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</=
span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/func=
tions.html#max" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt>
<code class=3D"descname">max</code><span class=3D"sig-paren">(</span><em>ar=
g1</em>, <em>arg2</em>, <em>*args</em><span class=3D"optional">[</span>, <e=
m>key</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</spa=
n></dt>
<dd><p>Return the largest item in an iterable or the largest of two or more
arguments.</p>
<p>If one positional argument is provided, it should be an <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/glossary.html#term-iterab=
le"><span class=3D"xref std std-term">iterable</span></a>.
The largest item in the iterable is returned.  If two or more positional
arguments are provided, the largest of the positional arguments is
returned.</p>
<p>There are two optional keyword-only arguments. The <em>key</em> argument=
 specifies
a one-argument ordering function like that used for <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/library/stdtypes.html#list.sort"=
 title=3D"list.sort"><code class=3D"xref py py-meth docutils literal notran=
slate"><span class=3D"pre">list.sort()</span></code></a>. The
<em>default</em> argument specifies an object to return if the provided ite=
rable is
empty. If the iterable is empty and <em>default</em> is not provided, a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#ValueError" title=3D"ValueError"><code class=3D"xref py py-e=
xc docutils literal notranslate"><span class=3D"pre">ValueError</span></cod=
e></a> is raised.</p>
<p>If multiple items are maximal, the function returns the first one
encountered.  This is consistent with other sort-stability preserving tools
such as <code class=3D"docutils literal notranslate"><span class=3D"pre">so=
rted(iterable,</span> <span class=3D"pre">key=3Dkeyfunc,</span> <span class=
=3D"pre">reverse=3DTrue)[0]</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">heapq.nlar=
gest(1,</span> <span class=3D"pre">iterable,</span> <span class=3D"pre">key=
=3Dkeyfunc)</span></code>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.4: </span>The <em>defau=
lt</em> keyword-only argument.</p>
</div>
</dd></dl>

<span class=3D"target" id=3D"func-memoryview"></span><dl class=3D"function"=
>
<dt>
<code class=3D"descname">memoryview</code><span class=3D"sig-paren">(</span=
><em>obj</em><span class=3D"sig-paren">)</span></dt>
<dd><p>Return a =E2=80=9Cmemory view=E2=80=9D object created from the given=
 argument.  See
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#typememoryview"><span class=3D"std std-ref">Memory Views</span=
></a> for more information.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"min">
<code class=3D"descname">min</code><span class=3D"sig-paren">(</span><em>it=
erable</em>, <em>*</em><span class=3D"optional">[</span>, <em>key</em>, <em=
>default</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</=
span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/func=
tions.html#min" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt>
<code class=3D"descname">min</code><span class=3D"sig-paren">(</span><em>ar=
g1</em>, <em>arg2</em>, <em>*args</em><span class=3D"optional">[</span>, <e=
m>key</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</spa=
n></dt>
<dd><p>Return the smallest item in an iterable or the smallest of two or mo=
re
arguments.</p>
<p>If one positional argument is provided, it should be an <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/glossary.html#term-iterab=
le"><span class=3D"xref std std-term">iterable</span></a>.
The smallest item in the iterable is returned.  If two or more positional
arguments are provided, the smallest of the positional arguments is
returned.</p>
<p>There are two optional keyword-only arguments. The <em>key</em> argument=
 specifies
a one-argument ordering function like that used for <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/library/stdtypes.html#list.sort"=
 title=3D"list.sort"><code class=3D"xref py py-meth docutils literal notran=
slate"><span class=3D"pre">list.sort()</span></code></a>. The
<em>default</em> argument specifies an object to return if the provided ite=
rable is
empty. If the iterable is empty and <em>default</em> is not provided, a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#ValueError" title=3D"ValueError"><code class=3D"xref py py-e=
xc docutils literal notranslate"><span class=3D"pre">ValueError</span></cod=
e></a> is raised.</p>
<p>If multiple items are minimal, the function returns the first one
encountered.  This is consistent with other sort-stability preserving tools
such as <code class=3D"docutils literal notranslate"><span class=3D"pre">so=
rted(iterable,</span> <span class=3D"pre">key=3Dkeyfunc)[0]</span></code> a=
nd <code class=3D"docutils literal notranslate"><span class=3D"pre">heapq.n=
smallest(1,</span>
<span class=3D"pre">iterable,</span> <span class=3D"pre">key=3Dkeyfunc)</sp=
an></code>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.4: </span>The <em>defau=
lt</em> keyword-only argument.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"next">
<code class=3D"descname">next</code><span class=3D"sig-paren">(</span><em>i=
terator</em><span class=3D"optional">[</span>, <em>default</em><span class=
=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=3D"headerl=
ink" href=3D"https://docs.python.org/3/library/functions.html#next" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Retrieve the next item from the <em>iterator</em> by calling its
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#iterator.__next__" title=3D"iterator.__next__"><code class=3D"=
xref py py-meth docutils literal notranslate"><span class=3D"pre">__next__(=
)</span></code></a> method.  If <em>default</em> is given, it is returned
if the iterator is exhausted, otherwise <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3/library/exceptions.html#StopIteration" title=
=3D"StopIteration"><code class=3D"xref py py-exc docutils literal notransla=
te"><span class=3D"pre">StopIteration</span></code></a> is raised.</p>
</dd></dl>

<dl class=3D"class">
<dt id=3D"object">
<em class=3D"property">class </em><code class=3D"descname">object</code><a =
class=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.ht=
ml#object" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return a new featureless object.  <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/functions.html#object" title=3D"obj=
ect"><code class=3D"xref py py-class docutils literal notranslate"><span cl=
ass=3D"pre">object</span></code></a> is a base for all classes.
It has the methods that are common to all instances of Python classes.  Thi=
s
function does not accept any arguments.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/functions.html#object" title=3D"object"><code class=3D"xre=
f py py-class docutils literal notranslate"><span class=3D"pre">object</spa=
n></code></a> does <em>not</em> have a <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/stdtypes.html#object.__dict__" title=
=3D"object.__dict__"><code class=3D"xref py py-attr docutils literal notran=
slate"><span class=3D"pre">__dict__</span></code></a>, so you can=E2=80=99t
assign arbitrary attributes to an instance of the <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/library/functions.html#object" tit=
le=3D"object"><code class=3D"xref py py-class docutils literal notranslate"=
><span class=3D"pre">object</span></code></a> class.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"oct">
<code class=3D"descname">oct</code><span class=3D"sig-paren">(</span><em>x<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/functions.html#oct" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Convert an integer number to an octal string prefixed with =E2=80=9C=
0o=E2=80=9D.  The result
is a valid Python expression. If <em>x</em> is not a Python <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/library/functions.html#i=
nt" title=3D"int"><code class=3D"xref py py-class docutils literal notransl=
ate"><span class=3D"pre">int</span></code></a> object, it
has to define an <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/reference/datamodel.html#object.__index__" title=3D"object.__index_=
_"><code class=3D"xref py py-meth docutils literal notranslate"><span class=
=3D"pre">__index__()</span></code></a> method that returns an integer. For
example:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">oct<=
/span><span class=3D"p">(</span><span class=3D"mi">8</span><span class=3D"p=
">)</span>
<span class=3D"go">'0o10'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">oct</span><span c=
lass=3D"p">(</span><span class=3D"o">-</span><span class=3D"mi">56</span><s=
pan class=3D"p">)</span>
<span class=3D"go">'-0o70'</span>
</pre></div>
</div>
<p>If you want to convert an integer number to octal string either with pre=
fix
=E2=80=9C0o=E2=80=9D or not, you can use either of the following ways.</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"s1">'</s=
pan><span class=3D"si">%#o</span><span class=3D"s1">'</span> <span class=3D=
"o">%</span> <span class=3D"mi">10</span><span class=3D"p">,</span> <span c=
lass=3D"s1">'</span><span class=3D"si">%o</span><span class=3D"s1">'</span>=
 <span class=3D"o">%</span> <span class=3D"mi">10</span>
<span class=3D"go">('0o12', '12')</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">format</span><spa=
n class=3D"p">(</span><span class=3D"mi">10</span><span class=3D"p">,</span=
> <span class=3D"s1">'#o'</span><span class=3D"p">),</span> <span class=3D"=
nb">format</span><span class=3D"p">(</span><span class=3D"mi">10</span><spa=
n class=3D"p">,</span> <span class=3D"s1">'o'</span><span class=3D"p">)</sp=
an>
<span class=3D"go">('0o12', '12')</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">f</span><span clas=
s=3D"s1">'</span><span class=3D"si">{10:#o}</span><span class=3D"s1">'</spa=
n><span class=3D"p">,</span> <span class=3D"n">f</span><span class=3D"s1">'=
</span><span class=3D"si">{10:o}</span><span class=3D"s1">'</span>
<span class=3D"go">('0o12', '12')</span>
</pre></div>
</div>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/functions.html#format" title=3D"format"><code class=3D"xref py p=
y-func docutils literal notranslate"><span class=3D"pre">format()</span></c=
ode></a> for more information.</p>
<blockquote>
<div><span class=3D"target" id=3D"index-4"></span></div></blockquote>
</dd></dl>

<dl class=3D"function">
<dt id=3D"open">
<code class=3D"descname">open</code><span class=3D"sig-paren">(</span><em>f=
ile</em>, <em>mode=3D'r'</em>, <em>buffering=3D-1</em>, <em>encoding=3DNone=
</em>, <em>errors=3DNone</em>, <em>newline=3DNone</em>, <em>closefd=3DTrue<=
/em>, <em>opener=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"h=
eaderlink" href=3D"https://docs.python.org/3/library/functions.html#open" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Open <em>file</em> and return a corresponding <a class=3D"reference =
internal" href=3D"https://docs.python.org/3/glossary.html#term-file-object"=
><span class=3D"xref std std-term">file object</span></a>.  If the file
cannot be opened, an <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/library/exceptions.html#OSError" title=3D"OSError"><code class=
=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">OSErro=
r</span></code></a> is raised.</p>
<p><em>file</em> is a <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/glossary.html#term-path-like-object"><span class=3D"xref std s=
td-term">path-like object</span></a> giving the pathname (absolute or
relative to the current working directory) of the file to be opened or an
integer file descriptor of the file to be wrapped.  (If a file descriptor i=
s
given, it is closed when the returned I/O object is closed, unless <em>clos=
efd</em>
is set to <code class=3D"docutils literal notranslate"><span class=3D"pre">=
False</span></code>.)</p>
<p><em>mode</em> is an optional string that specifies the mode in which the=
 file is
opened.  It defaults to <code class=3D"docutils literal notranslate"><span =
class=3D"pre">'r'</span></code> which means open for reading in text mode.
Other common values are <code class=3D"docutils literal notranslate"><span =
class=3D"pre">'w'</span></code> for writing (truncating the file if it
already exists), <code class=3D"docutils literal notranslate"><span class=
=3D"pre">'x'</span></code> for exclusive creation and <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">'a'</span></code> for appending
(which on <em>some</em> Unix systems, means that <em>all</em> writes append=
 to the end of
the file regardless of the current seek position).  In text mode, if
<em>encoding</em> is not specified the encoding used is platform dependent:
<code class=3D"docutils literal notranslate"><span class=3D"pre">locale.get=
preferredencoding(False)</span></code> is called to get the current locale
encoding. (For reading and writing raw bytes use binary mode and leave
<em>encoding</em> unspecified.)  The available modes are:</p>
<span class=3D"target" id=3D"filemodes"></span><table border=3D"1" class=3D=
"docutils" id=3D"index-5">
<colgroup>
<col width=3D"13%">
<col width=3D"88%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head">Character</th>
<th class=3D"head">Meaning</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">'r'</span></code></td>
<td>open for reading (default)</td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">'w'</span></code></td>
<td>open for writing, truncating the file first</td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">'x'</span></code></td>
<td>open for exclusive creation, failing if the file already exists</td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">'a'</span></code></td>
<td>open for writing, appending to the end of the file if it exists</td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">'b'</span></code></td>
<td>binary mode</td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">'t'</span></code></td>
<td>text mode (default)</td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">'+'</span></code></td>
<td>open a disk file for updating (reading and writing)</td>
</tr>
</tbody>
</table>
<p>The default mode is <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">'r'</span></code> (open for reading text, synonym of <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">'rt'</span></code>)=
.
For binary read-write access, the mode <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">'w+b'</span></code> opens and truncates the fi=
le
to 0 bytes.  <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">'r+b'</span></code> opens the file without truncation.</p>
<p>As mentioned in the <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/io.html#io-overview"><span class=3D"std std-ref">Over=
view</span></a>, Python distinguishes between binary
and text I/O.  Files opened in binary mode (including <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">'b'</span></code> in the <em>mo=
de</em>
argument) return contents as <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/stdtypes.html#bytes" title=3D"bytes"><code clas=
s=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">byt=
es</span></code></a> objects without any decoding.  In
text mode (the default, or when <code class=3D"docutils literal notranslate=
"><span class=3D"pre">'t'</span></code> is included in the <em>mode</em> ar=
gument),
the contents of the file are returned as <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/stdtypes.html#str" title=3D"str"><c=
ode class=3D"xref py py-class docutils literal notranslate"><span class=3D"=
pre">str</span></code></a>, the bytes having been
first decoded using a platform-dependent encoding or using the specified
<em>encoding</em> if given.</p>
<p>There is an additional mode character permitted, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">'U'</span></code>, which no longe=
r
has any effect, and is considered deprecated. It previously enabled
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-universal-newlines"><span class=3D"xref std std-term">universal n=
ewlines</span></a> in text mode, which became the default behaviour
in Python 3.0. Refer to the documentation of the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#open-newline-parameter"><span class=3D"std std-ref">newline</=
span></a> parameter for further details.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Python doesn=E2=80=99t depend on the underlying operating=
 system=E2=80=99s notion of text
files; all the processing is done by Python itself, and is therefore
platform-independent.</p>
</div>
<p><em>buffering</em> is an optional integer used to set the buffering poli=
cy.  Pass 0
to switch buffering off (only allowed in binary mode), 1 to select line
buffering (only usable in text mode), and an integer &gt; 1 to indicate the=
 size
in bytes of a fixed-size chunk buffer.  When no <em>buffering</em> argument=
 is
given, the default buffering policy works as follows:</p>
<ul class=3D"simple">
<li>Binary files are buffered in fixed-size chunks; the size of the buffer =
is
chosen using a heuristic trying to determine the underlying device=E2=80=99=
s =E2=80=9Cblock
size=E2=80=9D and falling back on <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/io.html#io.DEFAULT_BUFFER_SIZE" title=3D"i=
o.DEFAULT_BUFFER_SIZE"><code class=3D"xref py py-attr docutils literal notr=
anslate"><span class=3D"pre">io.DEFAULT_BUFFER_SIZE</span></code></a>.  On =
many systems,
the buffer will typically be 4096 or 8192 bytes long.</li>
<li>=E2=80=9CInteractive=E2=80=9D text files (files for which <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/library/io.html#io.IOB=
ase.isatty" title=3D"io.IOBase.isatty"><code class=3D"xref py py-meth docut=
ils literal notranslate"><span class=3D"pre">isatty()</span></code></a>
returns <code class=3D"docutils literal notranslate"><span class=3D"pre">Tr=
ue</span></code>) use line buffering.  Other text files use the policy
described above for binary files.</li>
</ul>
<p><em>encoding</em> is the name of the encoding used to decode or encode t=
he file.
This should only be used in text mode.  The default encoding is platform
dependent (whatever <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/locale.html#locale.getpreferredencoding" title=3D"locale=
.getpreferredencoding"><code class=3D"xref py py-func docutils literal notr=
anslate"><span class=3D"pre">locale.getpreferredencoding()</span></code></a=
> returns), but any
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-text-encoding"><span class=3D"xref std std-term">text encoding</s=
pan></a> supported by Python
can be used.  See the <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/library/codecs.html#module-codecs" title=3D"codecs: Encode and=
 decode data and streams."><code class=3D"xref py py-mod docutils literal n=
otranslate"><span class=3D"pre">codecs</span></code></a> module for
the list of supported encodings.</p>
<p><em>errors</em> is an optional string that specifies how encoding and de=
coding
errors are to be handled=E2=80=94this cannot be used in binary mode.
A variety of standard error handlers are available
(listed under <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/codecs.html#error-handlers"><span class=3D"std std-ref">Error =
Handlers</span></a>), though any
error handling name that has been registered with
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/c=
odecs.html#codecs.register_error" title=3D"codecs.register_error"><code cla=
ss=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">cod=
ecs.register_error()</span></code></a> is also valid.  The standard names
include:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'stric=
t'</span></code> to raise a <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/library/exceptions.html#ValueError" title=3D"ValueError"=
><code class=3D"xref py py-exc docutils literal notranslate"><span class=3D=
"pre">ValueError</span></code></a> exception if there is
an encoding error.  The default value of <code class=3D"docutils literal no=
translate"><span class=3D"pre">None</span></code> has the same
effect.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'ignor=
e'</span></code> ignores errors.  Note that ignoring encoding errors
can lead to data loss.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'repla=
ce'</span></code> causes a replacement marker (such as <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">'?'</span></code>) to be inser=
ted
where there is malformed data.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'surro=
gateescape'</span></code> will represent any incorrect bytes as code
points in the Unicode Private Use Area ranging from U+DC80 to
U+DCFF.  These private code points will then be turned back into
the same bytes when the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">surrogateescape</span></code> error handler is used
when writing data.  This is useful for processing files in an
unknown encoding.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'xmlch=
arrefreplace'</span></code> is only supported when writing to a file.
Characters not supported by the encoding are replaced with the
appropriate XML character reference <code class=3D"docutils literal notrans=
late"><span class=3D"pre">&amp;#nnn;</span></code>.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'backs=
lashreplace'</span></code> replaces malformed data by Python=E2=80=99s back=
slashed
escape sequences.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'namer=
eplace'</span></code> (also only supported when writing)
replaces unsupported characters with <code class=3D"docutils literal notran=
slate"><span class=3D"pre">\N{...}</span></code> escape sequences.</li>
</ul>
<p id=3D"open-newline-parameter"><span id=3D"index-6"></span><em>newline</e=
m> controls how <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/glossary.html#term-universal-newlines"><span class=3D"xref std std-t=
erm">universal newlines</span></a> mode works (it only
applies to text mode).  It can be <code class=3D"docutils literal notransla=
te"><span class=3D"pre">None</span></code>, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">''</span></code>, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">'\n'</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">'\r'</span></code>, a=
nd
<code class=3D"docutils literal notranslate"><span class=3D"pre">'\r\n'</sp=
an></code>.  It works as follows:</p>
<ul class=3D"simple">
<li>When reading input from the stream, if <em>newline</em> is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">None</span></code>, u=
niversal
newlines mode is enabled.  Lines in the input can end in <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">'\n'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'\r'</span=
></code>, or <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">'\r\n'</span></code>, and these are translated into <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">'\n'</span></code> before
being returned to the caller.  If it is <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">''</span></code>, universal newlines mode is
enabled, but line endings are returned to the caller untranslated.  If it
has any of the other legal values, input lines are only terminated by the
given string, and the line ending is returned to the caller untranslated.</=
li>
<li>When writing output to the stream, if <em>newline</em> is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">None</span></code>, a=
ny <code class=3D"docutils literal notranslate"><span class=3D"pre">'\n'</s=
pan></code>
characters written are translated to the system default line separator,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/o=
s.html#os.linesep" title=3D"os.linesep"><code class=3D"xref py py-data docu=
tils literal notranslate"><span class=3D"pre">os.linesep</span></code></a>.=
  If <em>newline</em> is <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">''</span></code> or <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">'\n'</span></code>, no translation
takes place.  If <em>newline</em> is any of the other legal values, any <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">'\n'</span></=
code>
characters written are translated to the given string.</li>
</ul>
<p>If <em>closefd</em> is <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">False</span></code> and a file descriptor rather than a fil=
ename was
given, the underlying file descriptor will be kept open when the file is
closed.  If a filename is given <em>closefd</em> must be <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">True</span></code> (the defa=
ult)
otherwise an error will be raised.</p>
<p>A custom opener can be used by passing a callable as <em>opener</em>. Th=
e underlying
file descriptor for the file object is then obtained by calling <em>opener<=
/em> with
(<em>file</em>, <em>flags</em>). <em>opener</em> must return an open file d=
escriptor (passing
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/o=
s.html#os.open" title=3D"os.open"><code class=3D"xref py py-mod docutils li=
teral notranslate"><span class=3D"pre">os.open</span></code></a> as <em>ope=
ner</em> results in functionality similar to passing
<code class=3D"docutils literal notranslate"><span class=3D"pre">None</span=
></code>).</p>
<p>The newly created file is <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/os.html#fd-inheritance"><span class=3D"std std-=
ref">non-inheritable</span></a>.</p>
<p>The following example uses the <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/os.html#dir-fd"><span class=3D"std std-ref=
">dir_fd</span></a> parameter of the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/o=
s.html#os.open" title=3D"os.open"><code class=3D"xref py py-func docutils l=
iteral notranslate"><span class=3D"pre">os.open()</span></code></a> functio=
n to open a file relative to a given directory:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2=
em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</sp=
an><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"=
kn">import</span> <span class=3D"nn">os</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">dir_fd</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">os</span><span class=3D"o">.</sp=
an><span class=3D"n">open</span><span class=3D"p">(</span><span class=3D"s1=
">'somedir'</span><span class=3D"p">,</span> <span class=3D"n">os</span><sp=
an class=3D"o">.</span><span class=3D"n">O_RDONLY</span><span class=3D"p">)=
</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">def</span> <span c=
lass=3D"nf">opener</span><span class=3D"p">(</span><span class=3D"n">path</=
span><span class=3D"p">,</span> <span class=3D"n">flags</span><span class=
=3D"p">):</span>
<span class=3D"gp">... </span>    <span class=3D"k">return</span> <span cla=
ss=3D"n">os</span><span class=3D"o">.</span><span class=3D"n">open</span><s=
pan class=3D"p">(</span><span class=3D"n">path</span><span class=3D"p">,</s=
pan> <span class=3D"n">flags</span><span class=3D"p">,</span> <span class=
=3D"n">dir_fd</span><span class=3D"o">=3D</span><span class=3D"n">dir_fd</s=
pan><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">with</span> <span =
class=3D"nb">open</span><span class=3D"p">(</span><span class=3D"s1">'spams=
pam.txt'</span><span class=3D"p">,</span> <span class=3D"s1">'w'</span><spa=
n class=3D"p">,</span> <span class=3D"n">opener</span><span class=3D"o">=3D=
</span><span class=3D"n">opener</span><span class=3D"p">)</span> <span clas=
s=3D"k">as</span> <span class=3D"n">f</span><span class=3D"p">:</span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"s1">'This will be written to somedir/spamspa=
m.txt'</span><span class=3D"p">,</span> <span class=3D"n">file</span><span =
class=3D"o">=3D</span><span class=3D"n">f</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">os</span><span cla=
ss=3D"o">.</span><span class=3D"n">close</span><span class=3D"p">(</span><s=
pan class=3D"n">dir_fd</span><span class=3D"p">)</span>  <span class=3D"c1"=
># don't leak a file descriptor</span>
</pre></div>
</div>
<p>The type of <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/glossary.html#term-file-object"><span class=3D"xref std std-term">fil=
e object</span></a> returned by the <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/library/functions.html#open" title=3D"open"><cod=
e class=3D"xref py py-func docutils literal notranslate"><span class=3D"pre=
">open()</span></code></a> function
depends on the mode.  When <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/functions.html#open" title=3D"open"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">open(=
)</span></code></a> is used to open a file in a text
mode (<code class=3D"docutils literal notranslate"><span class=3D"pre">'w'<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">'r'</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">'wt'</span></code>, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">'rt'</span></code>, etc.), it returns a subclass of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/i=
o.html#io.TextIOBase" title=3D"io.TextIOBase"><code class=3D"xref py py-cla=
ss docutils literal notranslate"><span class=3D"pre">io.TextIOBase</span></=
code></a> (specifically <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/io.html#io.TextIOWrapper" title=3D"io.TextIOWrapper"=
><code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">io.TextIOWrapper</span></code></a>).  When used
to open a file in a binary mode with buffering, the returned class is a
subclass of <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/io.html#io.BufferedIOBase" title=3D"io.BufferedIOBase"><code cla=
ss=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">io=
.BufferedIOBase</span></code></a>.  The exact class varies: in read
binary mode, it returns an <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/io.html#io.BufferedReader" title=3D"io.BufferedRe=
ader"><code class=3D"xref py py-class docutils literal notranslate"><span c=
lass=3D"pre">io.BufferedReader</span></code></a>; in write binary and
append binary modes, it returns an <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/library/io.html#io.BufferedWriter" title=3D"io.Bu=
fferedWriter"><code class=3D"xref py py-class docutils literal notranslate"=
><span class=3D"pre">io.BufferedWriter</span></code></a>, and in
read/write mode, it returns an <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/io.html#io.BufferedRandom" title=3D"io.Buffer=
edRandom"><code class=3D"xref py py-class docutils literal notranslate"><sp=
an class=3D"pre">io.BufferedRandom</span></code></a>.  When buffering is
disabled, the raw stream, a subclass of <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3/library/io.html#io.RawIOBase" title=3D"io.Ra=
wIOBase"><code class=3D"xref py py-class docutils literal notranslate"><spa=
n class=3D"pre">io.RawIOBase</span></code></a>,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/i=
o.html#io.FileIO" title=3D"io.FileIO"><code class=3D"xref py py-class docut=
ils literal notranslate"><span class=3D"pre">io.FileIO</span></code></a>, i=
s returned.</p>
<p id=3D"index-7">See also the file handling modules, such as, <a class=3D"=
reference internal" href=3D"https://docs.python.org/3/library/fileinput.htm=
l#module-fileinput" title=3D"fileinput: Loop over standard input or a list =
of files."><code class=3D"xref py py-mod docutils literal notranslate"><spa=
n class=3D"pre">fileinput</span></code></a>, <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/library/io.html#module-io" title=3D"io:=
 Core tools for working with streams."><code class=3D"xref py py-mod docuti=
ls literal notranslate"><span class=3D"pre">io</span></code></a>
(where <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/functions.html#open" title=3D"open"><code class=3D"xref py py-func do=
cutils literal notranslate"><span class=3D"pre">open()</span></code></a> is=
 declared), <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/os.html#module-os" title=3D"os: Miscellaneous operating system i=
nterfaces."><code class=3D"xref py py-mod docutils literal notranslate"><sp=
an class=3D"pre">os</span></code></a>, <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/os.path.html#module-os.path" title=3D=
"os.path: Operations on pathnames."><code class=3D"xref py py-mod docutils =
literal notranslate"><span class=3D"pre">os.path</span></code></a>, <a clas=
s=3D"reference internal" href=3D"https://docs.python.org/3/library/tempfile=
.html#module-tempfile" title=3D"tempfile: Generate temporary files and dire=
ctories."><code class=3D"xref py py-mod docutils literal notranslate"><span=
 class=3D"pre">tempfile</span></code></a>,
and <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/shutil.html#module-shutil" title=3D"shutil: High-level file operations, =
including copying."><code class=3D"xref py py-mod docutils literal notransl=
ate"><span class=3D"pre">shutil</span></code></a>.</p>
<div class=3D"versionchanged">
<blockquote>
<div><span class=3D"versionmodified">Changed in version 3.3: </span><ul cla=
ss=3D"simple">
<li>The <em>opener</em> parameter was added.</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">'x=
'</span></code> mode was added.</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/exceptions.html#IOError" title=3D"IOError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">IOError</span></code></a=
> used to be raised, it is now an alias of <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/library/exceptions.html#OSError" title=3D=
"OSError"><code class=3D"xref py py-exc docutils literal notranslate"><span=
 class=3D"pre">OSError</span></code></a>.</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/exceptions.html#FileExistsError" title=3D"FileExistsError"><code class=
=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">FileEx=
istsError</span></code></a> is now raised if the file opened in exclusive
creation mode (<code class=3D"docutils literal notranslate"><span class=3D"=
pre">'x'</span></code>) already exists.</li>
</ul>
</div></blockquote>
</div>
<div class=3D"versionchanged">
<blockquote>
<div><span class=3D"versionmodified">Changed in version 3.4: </span><ul cla=
ss=3D"simple">
<li>The file is now non-inheritable.</li>
</ul>
</div></blockquote>
</div>
<div class=3D"deprecated">
<p><span class=3D"versionmodified">Deprecated since version 3.4, will be re=
moved in version 4.0: </span>The <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">'U'</span></code> mode.</p>
</div>
<div class=3D"versionchanged">
<blockquote>
<div><span class=3D"versionmodified">Changed in version 3.5: </span><ul cla=
ss=3D"simple">
<li>If the system call is interrupted and the signal handler does not raise=
 an
exception, the function now retries the system call instead of raising an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#InterruptedError" title=3D"InterruptedError"><code class=3D"=
xref py py-exc docutils literal notranslate"><span class=3D"pre">Interrupte=
dError</span></code></a> exception (see <span class=3D"target" id=3D"index-=
8"></span><a class=3D"pep reference external" href=3D"https://www.python.or=
g/dev/peps/pep-0475"><strong>PEP 475</strong></a> for the rationale).</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">'n=
amereplace'</span></code> error handler was added.</li>
</ul>
</div></blockquote>
</div>
<div class=3D"versionchanged">
<blockquote>
<div><span class=3D"versionmodified">Changed in version 3.6: </span><ul cla=
ss=3D"simple">
<li>Support added to accept objects implementing <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/library/os.html#os.PathLike" title=
=3D"os.PathLike"><code class=3D"xref py py-class docutils literal notransla=
te"><span class=3D"pre">os.PathLike</span></code></a>.</li>
<li>On Windows, opening a console buffer may return a subclass of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/i=
o.html#io.RawIOBase" title=3D"io.RawIOBase"><code class=3D"xref py py-class=
 docutils literal notranslate"><span class=3D"pre">io.RawIOBase</span></cod=
e></a> other than <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/io.html#io.FileIO" title=3D"io.FileIO"><code class=3D"xref=
 py py-class docutils literal notranslate"><span class=3D"pre">io.FileIO</s=
pan></code></a>.</li>
</ul>
</div></blockquote>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"ord">
<code class=3D"descname">ord</code><span class=3D"sig-paren">(</span><em>c<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/functions.html#ord" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Given a string representing one Unicode character, return an integer
representing the Unicode code point of that character.  For example,
<code class=3D"docutils literal notranslate"><span class=3D"pre">ord('a')</=
span></code> returns the integer <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">97</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">ord('=E2=82=AC')</span></code> (Euro sign=
)
returns <code class=3D"docutils literal notranslate"><span class=3D"pre">83=
64</span></code>.  This is the inverse of <a class=3D"reference internal" h=
ref=3D"https://docs.python.org/3/library/functions.html#chr" title=3D"chr">=
<code class=3D"xref py py-func docutils literal notranslate"><span class=3D=
"pre">chr()</span></code></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"pow">
<code class=3D"descname">pow</code><span class=3D"sig-paren">(</span><em>x<=
/em>, <em>y</em><span class=3D"optional">[</span>, <em>z</em><span class=3D=
"optional">]</span><span class=3D"sig-paren">)</span><a class=3D"headerlink=
" href=3D"https://docs.python.org/3/library/functions.html#pow" title=3D"Pe=
rmalink to this definition">=C2=B6</a></dt>
<dd><p>Return <em>x</em> to the power <em>y</em>; if <em>z</em> is present,=
 return <em>x</em> to the power <em>y</em>,
modulo <em>z</em> (computed more efficiently than <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">pow(x,</span> <span class=3D"pre">y=
)</span> <span class=3D"pre">%</span> <span class=3D"pre">z</span></code>).=
 The two-argument
form <code class=3D"docutils literal notranslate"><span class=3D"pre">pow(x=
,</span> <span class=3D"pre">y)</span></code> is equivalent to using the po=
wer operator: <code class=3D"docutils literal notranslate"><span class=3D"p=
re">x**y</span></code>.</p>
<p>The arguments must have numeric types.  With mixed operand types, the
coercion rules for binary arithmetic operators apply.  For <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/library/functions.html#in=
t" title=3D"int"><code class=3D"xref py py-class docutils literal notransla=
te"><span class=3D"pre">int</span></code></a>
operands, the result has the same type as the operands (after coercion)
unless the second argument is negative; in that case, all arguments are
converted to float and a float result is delivered.  For example, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">10**2</span></code>
returns <code class=3D"docutils literal notranslate"><span class=3D"pre">10=
0</span></code>, but <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">10**-2</span></code> returns <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">0.01</span></code>.  If the second argument i=
s
negative, the third argument must be omitted.  If <em>z</em> is present, <e=
m>x</em> and <em>y</em>
must be of integer types, and <em>y</em> must be non-negative.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"print">
<code class=3D"descname">print</code><span class=3D"sig-paren">(</span><em>=
*objects</em>, <em>sep=3D' '</em>, <em>end=3D'\n'</em>, <em>file=3Dsys.stdo=
ut</em>, <em>flush=3DFalse</em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.html#pr=
int" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Print <em>objects</em> to the text stream <em>file</em>, separated b=
y <em>sep</em> and followed
by <em>end</em>.  <em>sep</em>, <em>end</em>, <em>file</em> and <em>flush</=
em>, if present, must be given as keyword
arguments.</p>
<p>All non-keyword arguments are converted to strings like <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/library/stdtypes.html#str=
" title=3D"str"><code class=3D"xref py py-func docutils literal notranslate=
"><span class=3D"pre">str()</span></code></a> does and
written to the stream, separated by <em>sep</em> and followed by <em>end</e=
m>.  Both <em>sep</em>
and <em>end</em> must be strings; they can also be <code class=3D"docutils =
literal notranslate"><span class=3D"pre">None</span></code>, which means to=
 use the
default values.  If no <em>objects</em> are given, <a class=3D"reference in=
ternal" href=3D"https://docs.python.org/3/library/functions.html#print" tit=
le=3D"print"><code class=3D"xref py py-func docutils literal notranslate"><=
span class=3D"pre">print()</span></code></a> will just write
<em>end</em>.</p>
<p>The <em>file</em> argument must be an object with a <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">write(string)</span></code> me=
thod; if it
is not present or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">None</span></code>, <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/sys.html#sys.stdout" title=3D"sys.stdout"><code=
 class=3D"xref py py-data docutils literal notranslate"><span class=3D"pre"=
>sys.stdout</span></code></a> will be used.  Since printed
arguments are converted to text strings, <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/functions.html#print" title=3D"prin=
t"><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">print()</span></code></a> cannot be used with
binary mode file objects.  For these, use <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">file.write(...)</span></code> instead.</p>
<p>Whether output is buffered is usually determined by <em>file</em>, but i=
f the
<em>flush</em> keyword argument is true, the stream is forcibly flushed.</p=
>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.3: </span>Added the=
 <em>flush</em> keyword argument.</p>
</div>
</dd></dl>

<dl class=3D"class">
<dt id=3D"property">
<em class=3D"property">class </em><code class=3D"descname">property</code><=
span class=3D"sig-paren">(</span><em>fget=3DNone</em>, <em>fset=3DNone</em>=
, <em>fdel=3DNone</em>, <em>doc=3DNone</em><span class=3D"sig-paren">)</spa=
n><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/functio=
ns.html#property" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return a property attribute.</p>
<p><em>fget</em> is a function for getting an attribute value.  <em>fset</e=
m> is a function
for setting an attribute value. <em>fdel</em> is a function for deleting an=
 attribute
value.  And <em>doc</em> creates a docstring for the attribute.</p>
<p>A typical use is to define a managed attribute <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">x</span></code>:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">C</span><span class=3D"p">:</span>
    <span class=3D"k">def</span> <span class=3D"nf">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_x</span> <span class=3D"o">=3D</span> <span class=3D"kc">None</span=
>

    <span class=3D"k">def</span> <span class=3D"nf">getx</span><span class=
=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"k">return</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">_x</span>

    <span class=3D"k">def</span> <span class=3D"nf">setx</span><span class=
=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> <sp=
an class=3D"n">value</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_x</span> <span class=3D"o">=3D</span> <span class=3D"n">value</span=
>

    <span class=3D"k">def</span> <span class=3D"nf">delx</span><span class=
=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"k">del</span> <span class=3D"bp">self</span><span cl=
ass=3D"o">.</span><span class=3D"n">_x</span>

    <span class=3D"n">x</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">property</span><span class=3D"p">(</span><span class=3D"n">getx</span><=
span class=3D"p">,</span> <span class=3D"n">setx</span><span class=3D"p">,<=
/span> <span class=3D"n">delx</span><span class=3D"p">,</span> <span class=
=3D"s2">"I'm the 'x' property."</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>If <em>c</em> is an instance of <em>C</em>, <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">c.x</span></code> will invoke the gett=
er,
<code class=3D"docutils literal notranslate"><span class=3D"pre">c.x</span>=
 <span class=3D"pre">=3D</span> <span class=3D"pre">value</span></code> wil=
l invoke the setter and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">del</span> <span class=3D"pre">c.x</span></code> the deleter.=
</p>
<p>If given, <em>doc</em> will be the docstring of the property attribute. =
Otherwise, the
property will copy <em>fget</em>=E2=80=99s docstring (if it exists).  This =
makes it possible to
create read-only properties easily using <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/functions.html#property" title=3D"p=
roperty"><code class=3D"xref py py-func docutils literal notranslate"><span=
 class=3D"pre">property()</span></code></a> as a <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/glossary.html#term-decorator"><span=
 class=3D"xref std std-term">decorator</span></a>:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">Parrot</span><span class=3D"p">:</span>
    <span class=3D"k">def</span> <span class=3D"nf">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_voltage</span> <span class=3D"o">=3D</span> <span class=3D"mi">1000=
00</span>

    <span class=3D"nd">@property</span>
    <span class=3D"k">def</span> <span class=3D"nf">voltage</span><span cla=
ss=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Get the current voltage."""</span>
        <span class=3D"k">return</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">_voltage</span>
</pre></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">@pr=
operty</span></code> decorator turns the <code class=3D"xref py py-meth doc=
utils literal notranslate"><span class=3D"pre">voltage()</span></code> meth=
od into a =E2=80=9Cgetter=E2=80=9D
for a read-only attribute with the same name, and it sets the docstring for
<em>voltage</em> to =E2=80=9CGet the current voltage.=E2=80=9D</p>
<p>A property object has <code class=3D"xref py py-attr docutils literal no=
translate"><span class=3D"pre">getter</span></code>, <code class=3D"xref py=
 py-attr docutils literal notranslate"><span class=3D"pre">setter</span></c=
ode>,
and <code class=3D"xref py py-attr docutils literal notranslate"><span clas=
s=3D"pre">deleter</span></code> methods usable as decorators that create a
copy of the property with the corresponding accessor function set to the
decorated function.  This is best explained with an example:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">C</span><span class=3D"p">:</span>
    <span class=3D"k">def</span> <span class=3D"nf">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_x</span> <span class=3D"o">=3D</span> <span class=3D"kc">None</span=
>

    <span class=3D"nd">@property</span>
    <span class=3D"k">def</span> <span class=3D"nf">x</span><span class=3D"=
p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"sd">"""I'm the 'x' property."""</span>
        <span class=3D"k">return</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">_x</span>

    <span class=3D"nd">@x</span><span class=3D"o">.</span><span class=3D"n"=
>setter</span>
    <span class=3D"k">def</span> <span class=3D"nf">x</span><span class=3D"=
p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> <span c=
lass=3D"n">value</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_x</span> <span class=3D"o">=3D</span> <span class=3D"n">value</span=
>

    <span class=3D"nd">@x</span><span class=3D"o">.</span><span class=3D"n"=
>deleter</span>
    <span class=3D"k">def</span> <span class=3D"nf">x</span><span class=3D"=
p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"k">del</span> <span class=3D"bp">self</span><span cl=
ass=3D"o">.</span><span class=3D"n">_x</span>
</pre></div>
</div>
<p>This code is exactly equivalent to the first example.  Be sure to give t=
he
additional functions the same name as the original property (<code class=3D=
"docutils literal notranslate"><span class=3D"pre">x</span></code> in this
case.)</p>
<p>The returned property object also has the attributes <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">fget</span></code>, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">fset</span></code>,=
 and
<code class=3D"docutils literal notranslate"><span class=3D"pre">fdel</span=
></code> corresponding to the constructor arguments.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>The docst=
rings of property objects are now writeable.</p>
</div>
</dd></dl>

<span class=3D"target" id=3D"func-range"></span><dl class=3D"function">
<dt>
<code class=3D"descname">range</code><span class=3D"sig-paren">(</span><em>=
stop</em><span class=3D"sig-paren">)</span></dt>
<dt>
<code class=3D"descname">range</code><span class=3D"sig-paren">(</span><em>=
start</em>, <em>stop</em><span class=3D"optional">[</span>, <em>step</em><s=
pan class=3D"optional">]</span><span class=3D"sig-paren">)</span></dt>
<dd><p>Rather than being a function, <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/stdtypes.html#range" title=3D"range">=
<code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">range</span></code></a> is actually an immutable
sequence type, as documented in <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/library/stdtypes.html#typesseq-range"><span class=3D=
"std std-ref">Ranges</span></a> and <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/library/stdtypes.html#typesseq"><span class=3D"s=
td std-ref">Sequence Types =E2=80=94 list, tuple, range</span></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"repr">
<code class=3D"descname">repr</code><span class=3D"sig-paren">(</span><em>o=
bject</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D=
"https://docs.python.org/3/library/functions.html#repr" title=3D"Permalink =
to this definition">=C2=B6</a></dt>
<dd><p>Return a string containing a printable representation of an object. =
 For many
types, this function makes an attempt to return a string that would yield a=
n
object with the same value when passed to <a class=3D"reference internal" h=
ref=3D"https://docs.python.org/3/library/functions.html#eval" title=3D"eval=
"><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">eval()</span></code></a>, otherwise the
representation is a string enclosed in angle brackets that contains the nam=
e
of the type of the object together with additional information often
including the name and address of the object.  A class can control what thi=
s
function returns for its instances by defining a <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/reference/datamodel.html#object.__r=
epr__" title=3D"object.__repr__"><code class=3D"xref py py-meth docutils li=
teral notranslate"><span class=3D"pre">__repr__()</span></code></a> method.=
</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"reversed">
<code class=3D"descname">reversed</code><span class=3D"sig-paren">(</span><=
em>seq</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/functions.html#reversed" title=3D"Per=
malink to this definition">=C2=B6</a></dt>
<dd><p>Return a reverse <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/glossary.html#term-iterator"><span class=3D"xref std std-ter=
m">iterator</span></a>.  <em>seq</em> must be an object which has
a <a class=3D"reference internal" href=3D"https://docs.python.org/3/referen=
ce/datamodel.html#object.__reversed__" title=3D"object.__reversed__"><code =
class=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">=
__reversed__()</span></code></a> method or supports the sequence protocol (=
the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__len__" title=3D"object.__len__"><code class=3D"xre=
f py py-meth docutils literal notranslate"><span class=3D"pre">__len__()</s=
pan></code></a> method and the <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/reference/datamodel.html#object.__getitem__" title=3D=
"object.__getitem__"><code class=3D"xref py py-meth docutils literal notran=
slate"><span class=3D"pre">__getitem__()</span></code></a> method with inte=
ger
arguments starting at <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">0</span></code>).</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"round">
<code class=3D"descname">round</code><span class=3D"sig-paren">(</span><em>=
number</em><span class=3D"optional">[</span>, <em>ndigits</em><span class=
=3D"optional">]</span><span class=3D"sig-paren">)</span><a class=3D"headerl=
ink" href=3D"https://docs.python.org/3/library/functions.html#round" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return <em>number</em> rounded to <em>ndigits</em> precision after t=
he decimal
point.  If <em>ndigits</em> is omitted or is <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">None</span></code>, it returns the
nearest integer to its input.</p>
<p>For the built-in types supporting <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/functions.html#round" title=3D"round"=
><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">round()</span></code></a>, values are rounded to the
closest multiple of 10 to the power minus <em>ndigits</em>; if two multiple=
s are
equally close, rounding is done toward the even choice (so, for example,
both <code class=3D"docutils literal notranslate"><span class=3D"pre">round=
(0.5)</span></code> and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">round(-0.5)</span></code> are <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">0</span></code>, and <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">round(1.5)</span></code> is
<code class=3D"docutils literal notranslate"><span class=3D"pre">2</span></=
code>).  Any integer value is valid for <em>ndigits</em> (positive, zero, o=
r
negative).  The return value is an integer if <em>ndigits</em> is omitted o=
r
<code class=3D"docutils literal notranslate"><span class=3D"pre">None</span=
></code>.
Otherwise the return value has the same type as <em>number</em>.</p>
<p>For a general Python object <code class=3D"docutils literal notranslate"=
><span class=3D"pre">number</span></code>, <code class=3D"docutils literal =
notranslate"><span class=3D"pre">round</span></code> delegates to
<code class=3D"docutils literal notranslate"><span class=3D"pre">number.__r=
ound__</span></code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The behavior of <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/functions.html#round" title=3D"round"><cod=
e class=3D"xref py py-func docutils literal notranslate"><span class=3D"pre=
">round()</span></code></a> for floats can be surprising: for example,
<code class=3D"docutils literal notranslate"><span class=3D"pre">round(2.67=
5,</span> <span class=3D"pre">2)</span></code> gives <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">2.67</span></code> instead of th=
e expected <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>2.68</span></code>.
This is not a bug: it=E2=80=99s a result of the fact that most decimal frac=
tions
can=E2=80=99t be represented exactly as a float.  See <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/tutorial/floatingpoint.html#tu=
t-fp-issues"><span class=3D"std std-ref">Floating Point Arithmetic:  Issues=
 and Limitations</span></a> for
more information.</p>
</div>
</dd></dl>

<span class=3D"target" id=3D"func-set"></span><dl class=3D"class">
<dt>
<em class=3D"property">class </em><code class=3D"descname">set</code><span =
class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>iterable</=
em><span class=3D"optional">]</span><span class=3D"sig-paren">)</span></dt>
<dd><p>Return a new <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/stdtypes.html#set" title=3D"set"><code class=3D"xref py =
py-class docutils literal notranslate"><span class=3D"pre">set</span></code=
></a> object, optionally with elements taken from
<em>iterable</em>.  <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">set</span></code> is a built-in class.  See <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/stdtypes.html#set" tit=
le=3D"set"><code class=3D"xref py py-class docutils literal notranslate"><s=
pan class=3D"pre">set</span></code></a> and
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#types-set"><span class=3D"std std-ref">Set Types =E2=80=94 set=
, frozenset</span></a> for documentation about this class.</p>
<p>For other containers see the built-in <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/stdtypes.html#frozenset" title=3D"f=
rozenset"><code class=3D"xref py py-class docutils literal notranslate"><sp=
an class=3D"pre">frozenset</span></code></a>, <a class=3D"reference interna=
l" href=3D"https://docs.python.org/3/library/stdtypes.html#list" title=3D"l=
ist"><code class=3D"xref py py-class docutils literal notranslate"><span cl=
ass=3D"pre">list</span></code></a>,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#tuple" title=3D"tuple"><code class=3D"xref py py-class docutil=
s literal notranslate"><span class=3D"pre">tuple</span></code></a>, and <a =
class=3D"reference internal" href=3D"https://docs.python.org/3/library/stdt=
ypes.html#dict" title=3D"dict"><code class=3D"xref py py-class docutils lit=
eral notranslate"><span class=3D"pre">dict</span></code></a> classes, as we=
ll as the <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/collections.html#module-collections" title=3D"collections: Contain=
er datatypes"><code class=3D"xref py py-mod docutils literal notranslate"><=
span class=3D"pre">collections</span></code></a>
module.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"setattr">
<code class=3D"descname">setattr</code><span class=3D"sig-paren">(</span><e=
m>object</em>, <em>name</em>, <em>value</em><span class=3D"sig-paren">)</sp=
an><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/functi=
ons.html#setattr" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This is the counterpart of <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/functions.html#getattr" title=3D"getattr">=
<code class=3D"xref py py-func docutils literal notranslate"><span class=3D=
"pre">getattr()</span></code></a>.  The arguments are an object, a
string and an arbitrary value.  The string may name an existing attribute o=
r a
new attribute.  The function assigns the value to the attribute, provided t=
he
object allows it.  For example, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">setattr(x,</span> <span class=3D"pre">'foobar',</span=
> <span class=3D"pre">123)</span></code> is equivalent to
<code class=3D"docutils literal notranslate"><span class=3D"pre">x.foobar</=
span> <span class=3D"pre">=3D</span> <span class=3D"pre">123</span></code>.=
</p>
</dd></dl>

<dl class=3D"class">
<dt id=3D"slice">
<em class=3D"property">class </em><code class=3D"descname">slice</code><spa=
n class=3D"sig-paren">(</span><em>stop</em><span class=3D"sig-paren">)</spa=
n><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/functio=
ns.html#slice" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt>
<em class=3D"property">class </em><code class=3D"descname">slice</code><spa=
n class=3D"sig-paren">(</span><em>start</em>, <em>stop</em><span class=3D"o=
ptional">[</span>, <em>step</em><span class=3D"optional">]</span><span clas=
s=3D"sig-paren">)</span></dt>
<dd><p id=3D"index-9">Return a <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/glossary.html#term-slice"><span class=3D"xref std std=
-term">slice</span></a> object representing the set of indices specified by
<code class=3D"docutils literal notranslate"><span class=3D"pre">range(star=
t,</span> <span class=3D"pre">stop,</span> <span class=3D"pre">step)</span>=
</code>.  The <em>start</em> and <em>step</em> arguments default to
<code class=3D"docutils literal notranslate"><span class=3D"pre">None</span=
></code>.  Slice objects have read-only data attributes <code class=3D"xref=
 py py-attr docutils literal notranslate"><span class=3D"pre">start</span><=
/code>,
<code class=3D"xref py py-attr docutils literal notranslate"><span class=3D=
"pre">stop</span></code> and <code class=3D"xref py py-attr docutils litera=
l notranslate"><span class=3D"pre">step</span></code> which merely return t=
he argument
values (or their default).  They have no other explicit functionality;
however they are used by Numerical Python and other third party extensions.
Slice objects are also generated when extended indexing syntax is used.  Fo=
r
example: <code class=3D"docutils literal notranslate"><span class=3D"pre">a=
[start:stop:step]</span></code> or <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">a[start:stop,</span> <span class=3D"pre">i]</span>=
</code>.  See
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/i=
tertools.html#itertools.islice" title=3D"itertools.islice"><code class=3D"x=
ref py py-func docutils literal notranslate"><span class=3D"pre">itertools.=
islice()</span></code></a> for an alternate version that returns an iterato=
r.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"sorted">
<code class=3D"descname">sorted</code><span class=3D"sig-paren">(</span><em=
>iterable</em>, <em>*</em>, <em>key=3DNone</em>, <em>reverse=3DFalse</em><s=
pan class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/library/functions.html#sorted" title=3D"Permalink to this de=
finition">=C2=B6</a></dt>
<dd><p>Return a new sorted list from the items in <em>iterable</em>.</p>
<p>Has two optional arguments which must be specified as keyword arguments.=
</p>
<p><em>key</em> specifies a function of one argument that is used to extrac=
t a comparison
key from each element in <em>iterable</em> (for example, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">key=3Dstr.lower</span></code=
>).  The
default value is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">None</span></code> (compare the elements directly).</p>
<p><em>reverse</em> is a boolean value.  If set to <code class=3D"docutils =
literal notranslate"><span class=3D"pre">True</span></code>, then the list =
elements are
sorted as if each comparison were reversed.</p>
<p>Use <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/functools.html#functools.cmp_to_key" title=3D"functools.cmp_to_key"><=
code class=3D"xref py py-func docutils literal notranslate"><span class=3D"=
pre">functools.cmp_to_key()</span></code></a> to convert an old-style <em>c=
mp</em> function to a
<em>key</em> function.</p>
<p>The built-in <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/functions.html#sorted" title=3D"sorted"><code class=3D"xref =
py py-func docutils literal notranslate"><span class=3D"pre">sorted()</span=
></code></a> function is guaranteed to be stable. A sort is
stable if it guarantees not to change the relative order of elements that
compare equal =E2=80=94 this is helpful for sorting in multiple passes (for
example, sort by department, then by salary grade).</p>
<p>For sorting examples and a brief sorting tutorial, see <a class=3D"refer=
ence internal" href=3D"https://docs.python.org/3/howto/sorting.html#sorting=
howto"><span class=3D"std std-ref">Sorting HOW TO</span></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"staticmethod">
<code class=3D"descclassname">@</code><code class=3D"descname">staticmethod=
</code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/fu=
nctions.html#staticmethod" title=3D"Permalink to this definition">=C2=B6</a=
></dt>
<dd><p>Transform a method into a static method.</p>
<p>A static method does not receive an implicit first argument. To declare =
a static
method, use this idiom:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">C</span><span class=3D"p">:</span>
    <span class=3D"nd">@staticmethod</span>
    <span class=3D"k">def</span> <span class=3D"nf">f</span><span class=3D"=
p">(</span><span class=3D"n">arg1</span><span class=3D"p">,</span> <span cl=
ass=3D"n">arg2</span><span class=3D"p">,</span> <span class=3D"o">...</span=
><span class=3D"p">):</span> <span class=3D"o">...</span>
</pre></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">@st=
aticmethod</span></code> form is a function <a class=3D"reference internal"=
 href=3D"https://docs.python.org/3/glossary.html#term-decorator"><span clas=
s=3D"xref std std-term">decorator</span></a> =E2=80=93 see the
description of function definitions in <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/reference/compound_stmts.html#function"><span=
 class=3D"std std-ref">Function definitions</span></a> for details.</p>
<p>It can be called either on the class (such as <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">C.f()</span></code>) or on an instan=
ce (such
as <code class=3D"docutils literal notranslate"><span class=3D"pre">C().f()=
</span></code>).  The instance is ignored except for its class.</p>
<p>Static methods in Python are similar to those found in Java or C++. Also=
 see
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#classmethod" title=3D"classmethod"><code class=3D"xref py py-=
func docutils literal notranslate"><span class=3D"pre">classmethod()</span>=
</code></a> for a variant that is useful for creating alternate class
constructors.</p>
<p>Like all decorators, it is also possible to call <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">staticmethod</span></code> as
a regular function and do something with its result.  This is needed
in some cases where you need a reference to a function from a class
body and you want to avoid the automatic transformation to instance
method.  For these cases, use this idiom:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">C</span><span class=3D"p">:</span>
    <span class=3D"n">builtin_open</span> <span class=3D"o">=3D</span> <spa=
n class=3D"nb">staticmethod</span><span class=3D"p">(</span><span class=3D"=
nb">open</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>For more information on static methods, consult the documentation on the
standard type hierarchy in <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/reference/datamodel.html#types"><span class=3D"std std-re=
f">The standard type hierarchy</span></a>.</p>
</dd></dl>

<span class=3D"target" id=3D"func-str"><span id=3D"index-10"></span></span>=
<dl class=3D"class">
<dt>
<em class=3D"property">class </em><code class=3D"descname">str</code><span =
class=3D"sig-paren">(</span><em>object=3D''</em><span class=3D"sig-paren">)=
</span></dt>
<dt>
<em class=3D"property">class </em><code class=3D"descname">str</code><span =
class=3D"sig-paren">(</span><em>object=3Db''</em>, <em>encoding=3D'utf-8'</=
em>, <em>errors=3D'strict'</em><span class=3D"sig-paren">)</span></dt>
<dd><p>Return a <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/stdtypes.html#str" title=3D"str"><code class=3D"xref py py-c=
lass docutils literal notranslate"><span class=3D"pre">str</span></code></a=
> version of <em>object</em>.  See <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/library/stdtypes.html#str" title=3D"str"><code cl=
ass=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">st=
r()</span></code></a> for details.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">str</sp=
an></code> is the built-in string <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/glossary.html#term-class"><span class=3D"xref std =
std-term">class</span></a>.  For general information
about strings, see <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/stdtypes.html#textseq"><span class=3D"std std-ref">Text S=
equence Type =E2=80=94 str</span></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"sum">
<code class=3D"descname">sum</code><span class=3D"sig-paren">(</span><em>it=
erable</em><span class=3D"optional">[</span>, <em>start</em><span class=3D"=
optional">]</span><span class=3D"sig-paren">)</span><a class=3D"headerlink"=
 href=3D"https://docs.python.org/3/library/functions.html#sum" title=3D"Per=
malink to this definition">=C2=B6</a></dt>
<dd><p>Sums <em>start</em> and the items of an <em>iterable</em> from left =
to right and returns the
total.  <em>start</em> defaults to <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">0</span></code>. The <em>iterable</em>=E2=80=99s i=
tems are normally numbers,
and the start value is not allowed to be a string.</p>
<p>For some use cases, there are good alternatives to <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/functions.html#sum" ti=
tle=3D"sum"><code class=3D"xref py py-func docutils literal notranslate"><s=
pan class=3D"pre">sum()</span></code></a>.
The preferred, fast way to concatenate a sequence of strings is by calling
<code class=3D"docutils literal notranslate"><span class=3D"pre">''.join(se=
quence)</span></code>.  To add floating point values with extended precisio=
n,
see <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/math.html#math.fsum" title=3D"math.fsum"><code class=3D"xref py py-func =
docutils literal notranslate"><span class=3D"pre">math.fsum()</span></code>=
</a>.  To concatenate a series of iterables, consider using
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/i=
tertools.html#itertools.chain" title=3D"itertools.chain"><code class=3D"xre=
f py py-func docutils literal notranslate"><span class=3D"pre">itertools.ch=
ain()</span></code></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"super">
<code class=3D"descname">super</code><span class=3D"sig-paren">(</span><spa=
n class=3D"optional">[</span><em>type</em><span class=3D"optional">[</span>=
, <em>object-or-type</em><span class=3D"optional">]</span><span class=3D"op=
tional">]</span><span class=3D"sig-paren">)</span><a class=3D"headerlink" h=
ref=3D"https://docs.python.org/3/library/functions.html#super" title=3D"Per=
malink to this definition">=C2=B6</a></dt>
<dd><p>Return a proxy object that delegates method calls to a parent or sib=
ling
class of <em>type</em>.  This is useful for accessing inherited methods tha=
t have
been overridden in a class. The search order is same as that used by
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#getattr" title=3D"getattr"><code class=3D"xref py py-func doc=
utils literal notranslate"><span class=3D"pre">getattr()</span></code></a> =
except that the <em>type</em> itself is skipped.</p>
<p>The <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/stdtypes.html#class.__mro__" title=3D"class.__mro__"><code class=3D"x=
ref py py-attr docutils literal notranslate"><span class=3D"pre">__mro__</s=
pan></code></a> attribute of the <em>type</em> lists the method
resolution search order used by both <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/functions.html#getattr" title=3D"geta=
ttr"><code class=3D"xref py py-func docutils literal notranslate"><span cla=
ss=3D"pre">getattr()</span></code></a> and <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/library/functions.html#super" title=3D"su=
per"><code class=3D"xref py py-func docutils literal notranslate"><span cla=
ss=3D"pre">super()</span></code></a>.  The
attribute is dynamic and can change whenever the inheritance hierarchy is
updated.</p>
<p>If the second argument is omitted, the super object returned is unbound.=
  If
the second argument is an object, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">isinstance(obj,</span> <span class=3D"pre">type)</s=
pan></code> must be true.  If
the second argument is a type, <code class=3D"docutils literal notranslate"=
><span class=3D"pre">issubclass(type2,</span> <span class=3D"pre">type)</sp=
an></code> must be true (this
is useful for classmethods).</p>
<p>There are two typical use cases for <em>super</em>.  In a class hierarch=
y with
single inheritance, <em>super</em> can be used to refer to parent classes w=
ithout
naming them explicitly, thus making the code more maintainable.  This use
closely parallels the use of <em>super</em> in other programming languages.=
</p>
<p>The second use case is to support cooperative multiple inheritance in a
dynamic execution environment.  This use case is unique to Python and is
not found in statically compiled languages or languages that only support
single inheritance.  This makes it possible to implement =E2=80=9Cdiamond d=
iagrams=E2=80=9D
where multiple base classes implement the same method.  Good design dictate=
s
that this method have the same calling signature in every case (because the
order of calls is determined at runtime, because that order adapts
to changes in the class hierarchy, and because that order can include
sibling classes that are unknown prior to runtime).</p>
<p>For both use cases, a typical superclass call looks like this:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">C</span><span class=3D"p">(</span><span class=3D"n">B</sp=
an><span class=3D"p">):</span>
    <span class=3D"k">def</span> <span class=3D"nf">method</span><span clas=
s=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> <s=
pan class=3D"n">arg</span><span class=3D"p">):</span>
        <span class=3D"nb">super</span><span class=3D"p">()</span><span cla=
ss=3D"o">.</span><span class=3D"n">method</span><span class=3D"p">(</span><=
span class=3D"n">arg</span><span class=3D"p">)</span>    <span class=3D"c1"=
># This does the same thing as:</span>
                               <span class=3D"c1"># super(C, self).method(a=
rg)</span>
</pre></div>
</div>
<p>Note that <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/functions.html#super" title=3D"super"><code class=3D"xref py py=
-func docutils literal notranslate"><span class=3D"pre">super()</span></cod=
e></a> is implemented as part of the binding process for
explicit dotted attribute lookups such as <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">super().__getitem__(name)</span></code>.
It does so by implementing its own <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__"=
 title=3D"object.__getattribute__"><code class=3D"xref py py-meth docutils =
literal notranslate"><span class=3D"pre">__getattribute__()</span></code></=
a> method for searching
classes in a predictable order that supports cooperative multiple inheritan=
ce.
Accordingly, <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/functions.html#super" title=3D"super"><code class=3D"xref py py=
-func docutils literal notranslate"><span class=3D"pre">super()</span></cod=
e></a> is undefined for implicit lookups using statements or
operators such as <code class=3D"docutils literal notranslate"><span class=
=3D"pre">super()[name]</span></code>.</p>
<p>Also note that, aside from the zero argument form, <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/functions.html#super" =
title=3D"super"><code class=3D"xref py py-func docutils literal notranslate=
"><span class=3D"pre">super()</span></code></a> is not
limited to use inside methods.  The two argument form specifies the
arguments exactly and makes the appropriate references.  The zero
argument form only works inside a class definition, as the compiler fills
in the necessary details to correctly retrieve the class being defined,
as well as accessing the current instance for ordinary methods.</p>
<p>For practical suggestions on how to design cooperative classes using
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#super" title=3D"super"><code class=3D"xref py py-func docutil=
s literal notranslate"><span class=3D"pre">super()</span></code></a>, see <=
a class=3D"reference external" href=3D"https://rhettinger.wordpress.com/201=
1/05/26/super-considered-super/">guide to using super()</a>.</p>
</dd></dl>

<span class=3D"target" id=3D"func-tuple"></span><dl class=3D"function">
<dt>
<code class=3D"descname">tuple</code><span class=3D"sig-paren">(</span><spa=
n class=3D"optional">[</span><em>iterable</em><span class=3D"optional">]</s=
pan><span class=3D"sig-paren">)</span></dt>
<dd><p>Rather than being a function, <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/stdtypes.html#tuple" title=3D"tuple">=
<code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">tuple</span></code></a> is actually an immutable
sequence type, as documented in <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/library/stdtypes.html#typesseq-tuple"><span class=3D=
"std std-ref">Tuples</span></a> and <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/library/stdtypes.html#typesseq"><span class=3D"s=
td std-ref">Sequence Types =E2=80=94 list, tuple, range</span></a>.</p>
</dd></dl>

<dl class=3D"class">
<dt id=3D"type">
<em class=3D"property">class </em><code class=3D"descname">type</code><span=
 class=3D"sig-paren">(</span><em>object</em><span class=3D"sig-paren">)</sp=
an><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/functi=
ons.html#type" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt>
<em class=3D"property">class </em><code class=3D"descname">type</code><span=
 class=3D"sig-paren">(</span><em>name</em>, <em>bases</em>, <em>dict</em><s=
pan class=3D"sig-paren">)</span></dt>
<dd><p id=3D"index-11">With one argument, return the type of an <em>object<=
/em>.  The return value is a
type object and generally the same object as returned by
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#instance.__class__" title=3D"instance.__class__"><code class=
=3D"xref py py-attr docutils literal notranslate"><span class=3D"pre">objec=
t.__class__</span></code></a>.</p>
<p>The <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/functions.html#isinstance" title=3D"isinstance"><code class=3D"xref p=
y py-func docutils literal notranslate"><span class=3D"pre">isinstance()</s=
pan></code></a> built-in function is recommended for testing the type
of an object, because it takes subclasses into account.</p>
<p>With three arguments, return a new type object.  This is essentially a
dynamic form of the <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/reference/compound_stmts.html#class"><code class=3D"xref std std=
-keyword docutils literal notranslate"><span class=3D"pre">class</span></co=
de></a> statement. The <em>name</em> string is the
class name and becomes the <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/stdtypes.html#definition.__name__" title=3D"defin=
ition.__name__"><code class=3D"xref py py-attr docutils literal notranslate=
"><span class=3D"pre">__name__</span></code></a> attribute; the <em>bases</=
em>
tuple itemizes the base classes and becomes the <a class=3D"reference inter=
nal" href=3D"https://docs.python.org/3/library/stdtypes.html#class.__bases_=
_" title=3D"class.__bases__"><code class=3D"xref py py-attr docutils litera=
l notranslate"><span class=3D"pre">__bases__</span></code></a>
attribute; and the <em>dict</em> dictionary is the namespace containing def=
initions
for class body and is copied to a standard dictionary to become the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#object.__dict__" title=3D"object.__dict__"><code class=3D"xref=
 py py-attr docutils literal notranslate"><span class=3D"pre">__dict__</spa=
n></code></a> attribute.  For example, the following two
statements create identical <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/library/functions.html#type" title=3D"type"><code class=
=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">type=
</span></code></a> objects:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">class=
</span> <span class=3D"nc">X</span><span class=3D"p">:</span>
<span class=3D"gp">... </span>    <span class=3D"n">a</span> <span class=3D=
"o">=3D</span> <span class=3D"mi">1</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">X</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"nb">type</span><span class=3D"p">(</span=
><span class=3D"s1">'X'</span><span class=3D"p">,</span> <span class=3D"p">=
(</span><span class=3D"nb">object</span><span class=3D"p">,),</span> <span =
class=3D"nb">dict</span><span class=3D"p">(</span><span class=3D"n">a</span=
><span class=3D"o">=3D</span><span class=3D"mi">1</span><span class=3D"p">)=
)</span>
</pre></div>
</div>
<p>See also <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/stdtypes.html#bltin-type-objects"><span class=3D"std std-ref">Ty=
pe Objects</span></a>.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span>Subclasse=
s of <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/functions.html#type" title=3D"type"><code class=3D"xref py py-class doc=
utils literal notranslate"><span class=3D"pre">type</span></code></a> which=
 don=E2=80=99t override <code class=3D"docutils literal notranslate"><span =
class=3D"pre">type.__new__</span></code> may no
longer use the one-argument form to get the type of an object.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"vars">
<code class=3D"descname">vars</code><span class=3D"sig-paren">(</span><span=
 class=3D"optional">[</span><em>object</em><span class=3D"optional">]</span=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://=
docs.python.org/3/library/functions.html#vars" title=3D"Permalink to this d=
efinition">=C2=B6</a></dt>
<dd><p>Return the <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/stdtypes.html#object.__dict__" title=3D"object.__dict__"><=
code class=3D"xref py py-attr docutils literal notranslate"><span class=3D"=
pre">__dict__</span></code></a> attribute for a module, class, instance,
or any other object with a <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/stdtypes.html#object.__dict__" title=3D"object.__=
dict__"><code class=3D"xref py py-attr docutils literal notranslate"><span =
class=3D"pre">__dict__</span></code></a> attribute.</p>
<p>Objects such as modules and instances have an updateable <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/library/stdtypes.html#ob=
ject.__dict__" title=3D"object.__dict__"><code class=3D"xref py py-attr doc=
utils literal notranslate"><span class=3D"pre">__dict__</span></code></a>
attribute; however, other objects may have write restrictions on their
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#object.__dict__" title=3D"object.__dict__"><code class=3D"xref=
 py py-attr docutils literal notranslate"><span class=3D"pre">__dict__</spa=
n></code></a> attributes (for example, classes use a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/t=
ypes.html#types.MappingProxyType" title=3D"types.MappingProxyType"><code cl=
ass=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">t=
ypes.MappingProxyType</span></code></a> to prevent direct dictionary update=
s).</p>
<p>Without an argument, <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/functions.html#vars" title=3D"vars"><code class=3D"x=
ref py py-func docutils literal notranslate"><span class=3D"pre">vars()</sp=
an></code></a> acts like <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3/library/functions.html#locals" title=3D"locals"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">local=
s()</span></code></a>.  Note, the
locals dictionary is only useful for reads since updates to the locals
dictionary are ignored.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"zip">
<code class=3D"descname">zip</code><span class=3D"sig-paren">(</span><em>*i=
terables</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/functions.html#zip" title=3D"Permalin=
k to this definition">=C2=B6</a></dt>
<dd><p>Make an iterator that aggregates elements from each of the iterables=
.</p>
<p>Returns an iterator of tuples, where the <em>i</em>-th tuple contains
the <em>i</em>-th element from each of the argument sequences or iterables.=
  The
iterator stops when the shortest input iterable is exhausted. With a single
iterable argument, it returns an iterator of 1-tuples.  With no arguments,
it returns an empty iterator.  Equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">zip</span><span class=3D"p">(</span><span class=3D"o">*</sp=
an><span class=3D"n">iterables</span><span class=3D"p">):</span>
    <span class=3D"c1"># zip('ABCD', 'xy') --&gt; Ax By</span>
    <span class=3D"n">sentinel</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"nb">object</span><span class=3D"p">()</span>
    <span class=3D"n">iterators</span> <span class=3D"o">=3D</span> <span c=
lass=3D"p">[</span><span class=3D"nb">iter</span><span class=3D"p">(</span>=
<span class=3D"n">it</span><span class=3D"p">)</span> <span class=3D"k">for=
</span> <span class=3D"n">it</span> <span class=3D"ow">in</span> <span clas=
s=3D"n">iterables</span><span class=3D"p">]</span>
    <span class=3D"k">while</span> <span class=3D"n">iterators</span><span =
class=3D"p">:</span>
        <span class=3D"n">result</span> <span class=3D"o">=3D</span> <span =
class=3D"p">[]</span>
        <span class=3D"k">for</span> <span class=3D"n">it</span> <span clas=
s=3D"ow">in</span> <span class=3D"n">iterators</span><span class=3D"p">:</s=
pan>
            <span class=3D"n">elem</span> <span class=3D"o">=3D</span> <spa=
n class=3D"nb">next</span><span class=3D"p">(</span><span class=3D"n">it</s=
pan><span class=3D"p">,</span> <span class=3D"n">sentinel</span><span class=
=3D"p">)</span>
            <span class=3D"k">if</span> <span class=3D"n">elem</span> <span=
 class=3D"ow">is</span> <span class=3D"n">sentinel</span><span class=3D"p">=
:</span>
                <span class=3D"k">return</span>
            <span class=3D"n">result</span><span class=3D"o">.</span><span =
class=3D"n">append</span><span class=3D"p">(</span><span class=3D"n">elem</=
span><span class=3D"p">)</span>
        <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span=
 class=3D"p">(</span><span class=3D"n">result</span><span class=3D"p">)</sp=
an>
</pre></div>
</div>
<p>The left-to-right evaluation order of the iterables is guaranteed. This
makes possible an idiom for clustering a data series into n-length groups
using <code class=3D"docutils literal notranslate"><span class=3D"pre">zip(=
*[iter(s)]*n)</span></code>.  This repeats the <em>same</em> iterator <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">n</span></code>=
 times
so that each output tuple has the result of <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">n</span></code> calls to the iterator.
This has the effect of dividing the input into n-length chunks.</p>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/functions.html#zip" title=3D"zip"><code class=3D"xref py py-func docutils=
 literal notranslate"><span class=3D"pre">zip()</span></code></a> should on=
ly be used with unequal length inputs when you don=E2=80=99t
care about trailing, unmatched values from the longer iterables.  If those
values are important, use <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/itertools.html#itertools.zip_longest" title=3D"ite=
rtools.zip_longest"><code class=3D"xref py py-func docutils literal notrans=
late"><span class=3D"pre">itertools.zip_longest()</span></code></a> instead=
.</p>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/functions.html#zip" title=3D"zip"><code class=3D"xref py py-func docutils=
 literal notranslate"><span class=3D"pre">zip()</span></code></a> in conjun=
ction with the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">*</span></code> operator can be used to unzip a
list:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2=
em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</sp=
an><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"=
n">x</span> <span class=3D"o">=3D</span> <span class=3D"p">[</span><span cl=
ass=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"mi">2</span><s=
pan class=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">]</sp=
an>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">y</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"p">[</span><span class=3D"mi">4</span><s=
pan class=3D"p">,</span> <span class=3D"mi">5</span><span class=3D"p">,</sp=
an> <span class=3D"mi">6</span><span class=3D"p">]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">zipped</span> <spa=
n class=3D"o">=3D</span> <span class=3D"nb">zip</span><span class=3D"p">(</=
span><span class=3D"n">x</span><span class=3D"p">,</span> <span class=3D"n"=
>y</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">list</span><span =
class=3D"p">(</span><span class=3D"n">zipped</span><span class=3D"p">)</spa=
n>
<span class=3D"go">[(1, 4), (2, 5), (3, 6)]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">x2</span><span cla=
ss=3D"p">,</span> <span class=3D"n">y2</span> <span class=3D"o">=3D</span> =
<span class=3D"nb">zip</span><span class=3D"p">(</span><span class=3D"o">*<=
/span><span class=3D"nb">zip</span><span class=3D"p">(</span><span class=3D=
"n">x</span><span class=3D"p">,</span> <span class=3D"n">y</span><span clas=
s=3D"p">))</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">x</span> <span cla=
ss=3D"o">=3D=3D</span> <span class=3D"nb">list</span><span class=3D"p">(</s=
pan><span class=3D"n">x2</span><span class=3D"p">)</span> <span class=3D"ow=
">and</span> <span class=3D"n">y</span> <span class=3D"o">=3D=3D</span> <sp=
an class=3D"nb">list</span><span class=3D"p">(</span><span class=3D"n">y2</=
span><span class=3D"p">)</span>
<span class=3D"go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"__import__">
<code class=3D"descname">__import__</code><span class=3D"sig-paren">(</span=
><em>name</em>, <em>globals=3DNone</em>, <em>locals=3DNone</em>, <em>fromli=
st=3D()</em>, <em>level=3D0</em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/functions.html#__=
import__" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><div class=3D"admonition note" id=3D"index-12">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">This is an advanced function that is not needed in everyd=
ay Python
programming, unlike <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/importlib.html#importlib.import_module" title=3D"importl=
ib.import_module"><code class=3D"xref py py-func docutils literal notransla=
te"><span class=3D"pre">importlib.import_module()</span></code></a>.</p>
</div>
<p>This function is invoked by the <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/reference/simple_stmts.html#import"><code class=
=3D"xref std std-keyword docutils literal notranslate"><span class=3D"pre">=
import</span></code></a> statement.  It can be
replaced (by importing the <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/builtins.html#module-builtins" title=3D"builtins:=
 The module that provides the built-in namespace."><code class=3D"xref py p=
y-mod docutils literal notranslate"><span class=3D"pre">builtins</span></co=
de></a> module and assigning to
<code class=3D"docutils literal notranslate"><span class=3D"pre">builtins._=
_import__</span></code>) in order to change semantics of the
<code class=3D"xref std std-keyword docutils literal notranslate"><span cla=
ss=3D"pre">import</span></code> statement, but doing so is <strong>strongly=
</strong> discouraged as it
is usually simpler to use import hooks (see <span class=3D"target" id=3D"in=
dex-13"></span><a class=3D"pep reference external" href=3D"https://www.pyth=
on.org/dev/peps/pep-0302"><strong>PEP 302</strong></a>) to attain the same
goals and does not cause issues with code which assumes the default import
implementation is in use.  Direct use of <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/functions.html#__import__" title=3D=
"__import__"><code class=3D"xref py py-func docutils literal notranslate"><=
span class=3D"pre">__import__()</span></code></a> is also
discouraged in favor of <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/importlib.html#importlib.import_module" title=3D"imp=
ortlib.import_module"><code class=3D"xref py py-func docutils literal notra=
nslate"><span class=3D"pre">importlib.import_module()</span></code></a>.</p=
>
<p>The function imports the module <em>name</em>, potentially using the giv=
en <em>globals</em>
and <em>locals</em> to determine how to interpret the name in a package con=
text.
The <em>fromlist</em> gives the names of objects or submodules that should =
be
imported from the module given by <em>name</em>.  The standard implementati=
on does
not use its <em>locals</em> argument at all, and uses its <em>globals</em> =
only to
determine the package context of the <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/reference/simple_stmts.html#import"><code cla=
ss=3D"xref std std-keyword docutils literal notranslate"><span class=3D"pre=
">import</span></code></a> statement.</p>
<p><em>level</em> specifies whether to use absolute or relative imports. <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">0</span></co=
de> (the
default) means only perform absolute imports.  Positive values for
<em>level</em> indicate the number of parent directories to search relative=
 to the
directory of the module calling <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/library/functions.html#__import__" title=3D"__import=
__"><code class=3D"xref py py-func docutils literal notranslate"><span clas=
s=3D"pre">__import__()</span></code></a> (see <span class=3D"target" id=3D"=
index-14"></span><a class=3D"pep reference external" href=3D"https://www.py=
thon.org/dev/peps/pep-0328"><strong>PEP 328</strong></a> for the
details).</p>
<p>When the <em>name</em> variable is of the form <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">package.module</span></code>, norma=
lly, the
top-level package (the name up till the first dot) is returned, <em>not</em=
> the
module named by <em>name</em>.  However, when a non-empty <em>fromlist</em>=
 argument is
given, the module named by <em>name</em> is returned.</p>
<p>For example, the statement <code class=3D"docutils literal notranslate">=
<span class=3D"pre">import</span> <span class=3D"pre">spam</span></code> re=
sults in bytecode resembling the
following code:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"n">spam</span> <s=
pan class=3D"o">=3D</span> <span class=3D"nb">__import__</span><span class=
=3D"p">(</span><span class=3D"s1">'spam'</span><span class=3D"p">,</span> <=
span class=3D"nb">globals</span><span class=3D"p">(),</span> <span class=3D=
"nb">locals</span><span class=3D"p">(),</span> <span class=3D"p">[],</span>=
 <span class=3D"mi">0</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>The statement <code class=3D"docutils literal notranslate"><span class=
=3D"pre">import</span> <span class=3D"pre">spam.ham</span></code> results i=
n this call:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"n">spam</span> <s=
pan class=3D"o">=3D</span> <span class=3D"nb">__import__</span><span class=
=3D"p">(</span><span class=3D"s1">'spam.ham'</span><span class=3D"p">,</spa=
n> <span class=3D"nb">globals</span><span class=3D"p">(),</span> <span clas=
s=3D"nb">locals</span><span class=3D"p">(),</span> <span class=3D"p">[],</s=
pan> <span class=3D"mi">0</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>Note how <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/functions.html#__import__" title=3D"__import__"><code class=3D"x=
ref py py-func docutils literal notranslate"><span class=3D"pre">__import__=
()</span></code></a> returns the toplevel module here because this is
the object that is bound to a name by the <a class=3D"reference internal" h=
ref=3D"https://docs.python.org/3/reference/simple_stmts.html#import"><code =
class=3D"xref std std-keyword docutils literal notranslate"><span class=3D"=
pre">import</span></code></a> statement.</p>
<p>On the other hand, the statement <code class=3D"docutils literal notrans=
late"><span class=3D"pre">from</span> <span class=3D"pre">spam.ham</span> <=
span class=3D"pre">import</span> <span class=3D"pre">eggs,</span> <span cla=
ss=3D"pre">sausage</span> <span class=3D"pre">as</span>
<span class=3D"pre">saus</span></code> results in</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"n">_temp</span> <=
span class=3D"o">=3D</span> <span class=3D"nb">__import__</span><span class=
=3D"p">(</span><span class=3D"s1">'spam.ham'</span><span class=3D"p">,</spa=
n> <span class=3D"nb">globals</span><span class=3D"p">(),</span> <span clas=
s=3D"nb">locals</span><span class=3D"p">(),</span> <span class=3D"p">[</spa=
n><span class=3D"s1">'eggs'</span><span class=3D"p">,</span> <span class=3D=
"s1">'sausage'</span><span class=3D"p">],</span> <span class=3D"mi">0</span=
><span class=3D"p">)</span>
<span class=3D"n">eggs</span> <span class=3D"o">=3D</span> <span class=3D"n=
">_temp</span><span class=3D"o">.</span><span class=3D"n">eggs</span>
<span class=3D"n">saus</span> <span class=3D"o">=3D</span> <span class=3D"n=
">_temp</span><span class=3D"o">.</span><span class=3D"n">sausage</span>
</pre></div>
</div>
<p>Here, the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">spam.ham</span></code> module is returned from <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/library/functions.html#__import__"=
 title=3D"__import__"><code class=3D"xref py py-func docutils literal notra=
nslate"><span class=3D"pre">__import__()</span></code></a>.  From this
object, the names to import are retrieved and assigned to their respective
names.</p>
<p>If you simply want to import a module (potentially within a package) by =
name,
use <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/importlib.html#importlib.import_module" title=3D"importlib.import_module=
"><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">importlib.import_module()</span></code></a>.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.3: </span>Negative =
values for <em>level</em> are no longer supported (which also changes
the default value to 0).</p>
</div>
</dd></dl>

<p class=3D"rubric">Footnotes</p>
<table class=3D"docutils footnote" frame=3D"void" id=3D"id2" rules=3D"none"=
>
<colgroup><col class=3D"label"><col></colgroup>
<tbody valign=3D"top">
<tr><td class=3D"label"><a class=3D"fn-backref" href=3D"https://docs.python=
.org/3/library/functions.html#id1">[1]</a></td><td>Note that the parser onl=
y accepts the Unix-style end of line convention.
If you are reading the code from a file, make sure to use newline conversio=
n
mode to convert Windows or Mac-style newlines.</td></tr>
</tbody>
</table>
</div>


          </div>
        </div>
      </div>
      <div class=3D"sphinxsidebar" role=3D"navigation" aria-label=3D"main n=
avigation">
        <div class=3D"sphinxsidebarwrapper" style=3D"float: left; margin-ri=
ght: 0px; width: 202px; top: 0px;">
  <h4>Previous topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/intro.h=
tml" title=3D"previous chapter">Introduction</a></p>
  <h4>Next topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/constan=
ts.html" title=3D"next chapter">Built-in Constants</a></p>
  <div role=3D"note" aria-label=3D"source link">
    <h3>This Page</h3>
    <ul class=3D"this-page-menu">
      <li><a href=3D"https://docs.python.org/3/bugs.html">Report a Bug</a><=
/li>
      <li>
        <a href=3D"https://github.com/python/cpython/blob/3.7/Doc/library/f=
unctions.rst" rel=3D"nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </div>
      <div id=3D"sidebarbutton" title=3D"Collapse sidebar" style=3D"border-=
radius: 0px 5px 5px 0px; color: rgb(68, 68, 68); background-color: rgb(204,=
 204, 204); font-size: 1.2em; cursor: pointer; height: 24974.7px; padding-t=
op: 1px; padding-left: 1px; margin-left: 218px;"><span style=3D"display: bl=
ock; position: fixed; top: 351.5px;">=C2=AB</span></div></div>
      <div class=3D"clearer"></div>
    </div> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/constants.html" titl=
e=3D"Built-in Constants">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/intro.html" title=3D=
"Introduction">previous</a> |</li>
        <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" =
style=3D"vertical-align: middle; margin-top: -1px"></li>
        <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
        <li>
          <span class=3D"language_switcher_placeholder"><select><option val=
ue=3D"en" selected=3D"selected">English</option><option value=3D"fr">French=
</option><option value=3D"ja">Japanese</option><option value=3D"ko">Korean<=
/option></select></span>
          <span class=3D"version_switcher_placeholder"><select><option valu=
e=3D"3.8">dev (3.8)</option><option value=3D"3.7" selected=3D"selected">3.7=
.3rc1</option><option value=3D"3.6">3.6</option><option value=3D"3.5">3.5</=
option><option value=3D"2.7">2.7</option></select></span>
          <a href=3D"https://docs.python.org/3/index.html">Documentation </=
a> =C2=BB
        </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html">The Python Standard Library</a> =C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div> =20
    <div class=3D"footer">
    =C2=A9 <a href=3D"https://docs.python.org/3/copyright.html">Copyright</=
a> 2001-2019, Python Software Foundation.
    <br>
    The Python Software Foundation is a non-profit corporation.
    <a href=3D"https://www.python.org/psf/donations/">Please donate.</a>
    <br>
    Last updated on Mar 15, 2019.
    <a href=3D"https://docs.python.org/3/bugs.html">Found a bug</a>?
    <br>
    Created using <a href=3D"http://sphinx.pocoo.org/">Sphinx</a> 1.8.4.
    </div>

 =20
</body><template shadowmode=3D"v0"><shadow></shadow><style></style></templa=
te></html>
------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pydoctheme.css

@charset "utf-8";

@import url("default.css");

body { background-color: white; margin-left: 1em; margin-right: 1em; }

div.related { margin-bottom: 1.2em; padding: 0.5em 0px; border-top: 1px sol=
id rgb(204, 204, 204); margin-top: 0.5em; }

div.related a:hover { color: rgb(0, 149, 196); }

div.related:first-child { border-top: 0px; border-bottom: 1px solid rgb(204=
, 204, 204); }

.inline-search { display: inline; }

form.inline-search input { display: inline; }

form.inline-search input[type=3D"submit"] { width: 30px; }

div.sphinxsidebar { background-color: rgb(238, 238, 238); border-radius: 5p=
x; line-height: 130%; font-size: smaller; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { margin-top: 1.5em; }

div.sphinxsidebarwrapper > h3:first-child { margin-top: 0.2em; }

div.sphinxsidebarwrapper > ul > li > ul > li { margin-bottom: 0.4em; }

div.sphinxsidebar a:hover { color: rgb(0, 149, 196); }

form.inline-search input, div.sphinxsidebar input { font-family: "Lucida Gr=
ande", Arial, sans-serif; border: 1px solid rgb(153, 153, 153); font-size: =
smaller; border-radius: 3px; }

div.sphinxsidebar input[type=3D"text"] { max-width: 150px; }

div.body { padding: 0px 0px 0px 1.2em; }

div.body p { line-height: 140%; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { margin: 0px; border: 0px; padding: 0.3em 0px; }

div.body hr { border: 0px; background-color: rgb(204, 204, 204); height: 1p=
x; }

div.body pre { border-radius: 3px; border: 1px solid rgb(170, 204, 153); }

div.body div.admonition, div.body div.impl-detail { border-radius: 3px; }

div.body div.impl-detail > p { margin: 0px; }

div.body div.seealso { border: 1px solid rgb(221, 221, 102); }

div.body a { color: rgb(0, 114, 170); }

div.body a:visited { color: rgb(99, 99, 187); }

div.body a:hover { color: rgb(0, 176, 228); }

tt, code, pre { font-family: monospace, sans-serif; font-size: 96.5%; }

div.body tt, div.body code { border-radius: 3px; }

div.body tt.descname, div.body code.descname { font-size: 120%; }

div.body tt.xref, div.body a tt, div.body code.xref, div.body a code { font=
-weight: normal; }

.deprecated { border-radius: 3px; }

table.docutils { border: 1px solid rgb(221, 221, 221); min-width: 20%; bord=
er-radius: 3px; margin-top: 10px; margin-bottom: 10px; }

table.docutils td, table.docutils th { border-radius: 3px; border: 1px soli=
d rgb(221, 221, 221) !important; }

table p, table li { text-align: left !important; }

table.docutils th { background-color: rgb(238, 238, 238); padding: 0.3em 0.=
5em; }

table.docutils td { background-color: white; padding: 0.3em 0.5em; }

table.footnote, table.footnote td { border: 0px !important; }

div.footer { line-height: 150%; margin-top: -2em; text-align: right; width:=
 auto; margin-right: 10px; }

div.footer a:hover { color: rgb(0, 149, 196); }

.refcount { color: rgb(0, 102, 0); }

.stableabi { color: rgb(34, 34, 153); }

.highlight { background: none !important; }
------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/default.css

@charset "utf-8";

@import url("classic.css");
------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/classic.css

@charset "utf-8";

@import url("basic.css");

body { font-family: "Lucida Grande", Arial, sans-serif; font-size: 100%; ba=
ckground-color: white; color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { background-color: white; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: white; color: rgb(34, 34, 34); padding: 0px 20=
px 30px; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 9px 0px; text-al=
ign: center; font-size: 75%; }

div.footer a { color: rgb(85, 85, 85); text-decoration: underline; }

div.related { background-color: white; line-height: 30px; color: rgb(102, 1=
02, 102); }

div.related a { color: rgb(68, 68, 68); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.4em; font-weight: normal; margin: 0px; pa=
dding: 0px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar h4 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.3em; font-weight: normal; margin: 5px 0px=
 0px; padding: 0px; }

div.sphinxsidebar p { color: rgb(68, 68, 68); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(68, 68, 68); =
}

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(68, 68, 68); font-family: s=
ans-serif; font-size: 1em; }

div#sidebarbutton { background-color: rgb(60, 110, 131); }

a { color: rgb(0, 144, 192); text-decoration: none; }

a:visited { color: rgb(0, 96, 143); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: "Lucida Grande", Arial, sans-serif; background-color: whit=
e; font-weight: normal; color: rgb(26, 26, 26); border-bottom: 1px solid rg=
b(204, 204, 204); margin: 20px -20px 10px; padding: 3px 0px 3px 10px; }

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(170, 170, 170); font-size: 0.8em; padding: 0px 4p=
x; text-decoration: none; }

a.headerlink:hover { background-color: rgb(170, 170, 170); color: white; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: jus=
tify; line-height: 130%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51=
, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-=
bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: n=
one; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0=
.95em; }

th { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: "Lucida Grande", Arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(2=
8, 78, 99); }
------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 3=
0px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { }

a.headerlink { visibility: hidden; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, .figure.align-left, object.align-left { clear: left; float:=
 left; margin-right: 1em; }

img.align-right, .figure.align-right, object.align-right { clear: right; fl=
oat: right; margin-left: 1em; }

img.align-center, .figure.align-center, object.align-center { display: bloc=
k; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-right { text-align: right; }

div.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 18=
7); padding: 7px 7px 0px; background-color: rgb(255, 255, 238); width: 40%;=
 float: right; }

p.sidebar-title { font-weight: bold; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px 7px 0px; mar=
gin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

div.admonition dl { margin-bottom: 0px; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

table.docutils { border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

div.figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption { padding: 0.3em; }

div.figure p.caption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist td { vertical-align: top; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

dl { margin-bottom: 15px; }

dd p { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

span.pre { hyphens: none; }

td.linenos pre { padding: 5px 0px; border: 0px; background-color: transpare=
nt; color: rgb(170, 170, 170); }

table.highlighttable { margin-left: 0.5em; }

table.highlighttable td { padding: 0px 0.5em; }

div.code-block-caption { padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

div.code-block-caption + div > div.highlight > pre { margin-top: 0px; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { padding: 1em 1em 0px; }

div.literal-block-wrapper div.highlight { margin: 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size=
: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: relative; left: 0px; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.python.org/3/_static/py.png

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A
/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9gEGxE4IQYzJ14AAAI3SURBVDjL
ZZNPSFVBFIe/e9+zd3silBCl0SZoU4s2rVq0EB5tQip4UNvATVGu3QRBiyAi2iltWkgbF5EgRhFF
RpiWtrWIzDIV1Pzz7p15M2fmtvDevOqBw8DM9zvnN8ycgF3R/eDtM2mac96ZdrFNxBikqbRV+vHH
/ut9gAZczoe7C3gnF0f6au1OLM5avFi8d1Ea+JvAMSAq8nsKOGs5f2cYJ3Y7rc2PO4BqkS8DdD98
f9tbe1ysCoxOBo1qlEXHJWcM4b5KPU19zleA0o4Clx99eO3EdqVewHsCoFRugUoVghJO7A6H6Vx9
wdtYi27cr5x6dy/03nVtWTU7bWeZh6jNUcAiCaFTURl9A+gs56AviHzh3mnqtdPxm6knfQPLU7Ua
okASQq/agY7yDrG16Mba6Pz48NP56VdrgAApYObGaicPtkovToFLQBKA/WUxTe3FRk4san15aGKg
d3Dj560rrdGJS6FT0X9YYvLuiMKL1kAQOpHZ3PqfyZfP41+9PW1VfzX0RXFSECfgNEmSTgImdDru
F2O0E8vvqZG1auQubAsKooIYYHpGvwA2g+xndQBHgWa6cG0ih5cW/w6VvEq3nChwCoBvs+bL2Z7V
ceBHGTDAIrABpMVuhw+4OiLgLIglOLPYBTQAlfErIeCzjRVg1dtEb1kt5Omv+DTV2YssAN+zNdkz
C42N9brV8WdvYp07seOdM2Of1F3AAknW0AJpwN6IgEPAEaANaMlcbmZdl7KRBuAfAb+v//yMAJoA
AAAASUVORK5CYII=

------MultipartBoundary--E3fOnQzdCnCmf543zLTAJsgKhBztHZCyRqenetrIve------
